package ActorLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class Fetch_Constraints extends BaseConstraintsDescriptor {
  public Fetch_Constraints() {
    super(CONCEPTS.Fetch$Nj);
  }

  public static class Policy_Property extends BasePropertyConstraintsDescriptor {
    public Policy_Property(ConstraintsDescriptor container) {
      super(PROPS.policy$Ol3f, container, false, true, false);
    }
    @Override
    public void setPropertyValue(SNode node, Object propertyValue) {
      staticSetPropertyValue(node, SPropertyOperations.castEnummember(propertyValue));
    }
    private static void staticSetPropertyValue(SNode node, SEnumerationLiteral propertyValue) {
      SPropertyOperations.assignEnum(node, PROPS.policy$Ol3f, propertyValue);

      if (propertyValue.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x619ceb90241d8976L, "ActorLanguage.structure.FetchingPolicy"), 0x619ceb90241d8977L, "FIFO"))) {

        SLinkOperations.setTarget(node, LINKS.message$diNF, SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(node, CONCEPTS.Actor$Uv, false, false), LINKS.messageQueue$afFg), LINKS.messages$FwF6)).getElement(0)));
        SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(node, CONCEPTS.Actor$Uv, false, false), LINKS.messageQueue$afFg), LINKS.messages$FwF6).remove(0);

      } else if (propertyValue.equals(SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x619ceb90241d8976L, "ActorLanguage.structure.FetchingPolicy"), 0x619ceb90241d8978L, "HIGHEST_PRIORITY"))) {

        SNode m = SNodeOperations.copyNode(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(node, CONCEPTS.Actor$Uv, false, false), LINKS.messageQueue$afFg), LINKS.messages$FwF6)).getElement(0));
        int priority = 5;

        {
          final SNode env = SLinkOperations.getTarget(m, LINKS.envelope$eoPh);
          if (SNodeOperations.isInstanceOf(env, CONCEPTS.CreateEnvelope$OK)) {
            priority = SPropertyOperations.getInteger(env, PROPS.priority$YWiN);
          }
        }
        {
          final SNode env = SLinkOperations.getTarget(m, LINKS.envelope$eoPh);
          if (SNodeOperations.isInstanceOf(env, CONCEPTS.SelectEnvelope$S6)) {
            priority = SPropertyOperations.getInteger(SLinkOperations.getTarget(env, LINKS.envelope$EmhE), PROPS.priority$YWiN);
          }
        }

        for (SNode message : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(node, CONCEPTS.Actor$Uv, false, false), LINKS.messageQueue$afFg), LINKS.messages$FwF6))) {
          int p = 5;
          {
            final SNode env = SLinkOperations.getTarget(message, LINKS.envelope$eoPh);
            if (SNodeOperations.isInstanceOf(env, CONCEPTS.CreateEnvelope$OK)) {
              p = SPropertyOperations.getInteger(env, PROPS.priority$YWiN);
            }
          }
          {
            final SNode env = SLinkOperations.getTarget(message, LINKS.envelope$eoPh);
            if (SNodeOperations.isInstanceOf(env, CONCEPTS.SelectEnvelope$S6)) {
              p = SPropertyOperations.getInteger(SLinkOperations.getTarget(env, LINKS.envelope$EmhE), PROPS.priority$YWiN);
            }
          }
          if (p < priority) {
            m = message;
          }
        }

        ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(node, CONCEPTS.Actor$Uv, false, false), LINKS.messageQueue$afFg), LINKS.messages$FwF6)).removeElement(m);
        SLinkOperations.setTarget(node, LINKS.message$diNF, m);
      }

    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.policy$Ol3f, new Policy_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Fetch$Nj = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x619ceb90241d8975L, "ActorLanguage.structure.Fetch");
    /*package*/ static final SConcept Actor$Uv = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23364L, "ActorLanguage.structure.Actor");
    /*package*/ static final SConcept CreateEnvelope$OK = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2176abe574366687L, "ActorLanguage.structure.CreateEnvelope");
    /*package*/ static final SConcept SelectEnvelope$S6 = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x9de89b125bf6283L, "ActorLanguage.structure.SelectEnvelope");
  }

  private static final class PROPS {
    /*package*/ static final SProperty policy$Ol3f = MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x619ceb90241d8975L, 0x619ceb90241d897bL, "policy");
    /*package*/ static final SProperty priority$YWiN = MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2176abe574366687L, 0x6ac9b580f468d377L, "priority");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink message$diNF = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x619ceb90241d8975L, 0x6ac9b580f41c3451L, "message");
    /*package*/ static final SContainmentLink messageQueue$afFg = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23364L, 0x6ac9b580f4306cb1L, "messageQueue");
    /*package*/ static final SContainmentLink messages$FwF6 = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x6ac9b580f420bed7L, 0x6ac9b580f420bedfL, "messages");
    /*package*/ static final SContainmentLink envelope$eoPh = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23371L, 0x2d5fc2c1e9650052L, "envelope");
    /*package*/ static final SReferenceLink envelope$EmhE = MetaAdapterFactory.getReferenceLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x9de89b125bf6283L, 0x9de89b125bf6284L, "envelope");
  }
}
