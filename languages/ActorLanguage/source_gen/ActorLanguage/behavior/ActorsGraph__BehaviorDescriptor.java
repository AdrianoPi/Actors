package ActorLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class ActorsGraph__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x262cd812cfe57936L, "ActorLanguage.structure.ActorsGraph");

  public static final SMethod<Void> checkDupLinks_id3QVj6nWOkkX = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("checkDupLinks").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(4448233057875477821L).languageId(0x9416196c5eca1268L, 0x10eda99958984cdeL).build2();
  /*package*/ static final SMethod<Void> checkDuplicateLinkList_id3QVj6nWOl3C = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("checkDuplicateLinkList").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(4448233057875480808L).languageId(0x9416196c5eca1268L, 0x10eda99958984cdeL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<Void> checkDuplicateLink_id3QVj6nWJGTI = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("checkDuplicateLink").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(4448233057874267758L).languageId(0x9416196c5eca1268L, 0x10eda99958984cdeL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<Void> checkDuplicateLinkActorLink_id3QVj6nWJKMj = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("checkDuplicateLinkActorLink").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(4448233057874283667L).languageId(0x9416196c5eca1268L, 0x10eda99958984cdeL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<Void> checkDuplicateLinkActorLinksList_id3QVj6nWJKQo = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("checkDuplicateLinkActorLinksList").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(4448233057874283928L).languageId(0x9416196c5eca1268L, 0x10eda99958984cdeL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(checkDupLinks_id3QVj6nWOkkX, checkDuplicateLinkList_id3QVj6nWOl3C, checkDuplicateLink_id3QVj6nWJGTI, checkDuplicateLinkActorLink_id3QVj6nWJKMj, checkDuplicateLinkActorLinksList_id3QVj6nWJKQo);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void checkDupLinks_id3QVj6nWOkkX(@NotNull SNode __thisNode__) {
    for (SNode link : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.links$3jtH))) {
      {
        final SNode actorLink = link;
        if (SNodeOperations.isInstanceOf(actorLink, CONCEPTS.ActorLink$sB)) {
          ActorsGraph__BehaviorDescriptor.checkDuplicateLink_id3QVj6nWJGTI.invokeSpecial(__thisNode__, actorLink);
        }
      }
      {
        final SNode actorLinksList = link;
        if (SNodeOperations.isInstanceOf(actorLinksList, CONCEPTS.ActorLinksList$l3)) {
          ActorsGraph__BehaviorDescriptor.checkDuplicateLinkList_id3QVj6nWOl3C.invokeSpecial(__thisNode__, actorLinksList);
        }
      }
    }
  }
  /*package*/ static void checkDuplicateLinkList_id3QVj6nWOl3C(@NotNull SNode __thisNode__, SNode list) {
    for (SNode link : ListSequence.fromList(SLinkOperations.getChildren(list, LINKS.links$O5ec))) {
      {
        final SNode actorLink = link;
        if (SNodeOperations.isInstanceOf(actorLink, CONCEPTS.ActorLink$sB)) {
          ActorsGraph__BehaviorDescriptor.checkDuplicateLink_id3QVj6nWJGTI.invokeSpecial(__thisNode__, actorLink);
        }
      }
      {
        final SNode actorLinksList = link;
        if (SNodeOperations.isInstanceOf(actorLinksList, CONCEPTS.ActorLinksList$l3)) {
          ActorsGraph__BehaviorDescriptor.checkDuplicateLinkList_id3QVj6nWOl3C.invokeSpecial(__thisNode__, actorLinksList);
        }
      }
    }
  }
  /*package*/ static void checkDuplicateLink_id3QVj6nWJGTI(@NotNull SNode __thisNode__, SNode link) {
    for (SNode actorLink : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.links$3jtH))) {
      {
        final SNode link1 = actorLink;
        if (SNodeOperations.isInstanceOf(link1, CONCEPTS.ActorLink$sB)) {
          ActorsGraph__BehaviorDescriptor.checkDuplicateLinkActorLink_id3QVj6nWJKMj.invokeSpecial(__thisNode__, link, link1);
        }
      }
      {
        final SNode list = actorLink;
        if (SNodeOperations.isInstanceOf(list, CONCEPTS.ActorLinksList$l3)) {
          ActorsGraph__BehaviorDescriptor.checkDuplicateLinkActorLinksList_id3QVj6nWJKQo.invokeSpecial(__thisNode__, link, list);
        }
      }
    }
  }
  /*package*/ static void checkDuplicateLinkActorLink_id3QVj6nWJKMj(@NotNull SNode __thisNode__, SNode link, SNode link1) {
    if (link != link1 && SLinkOperations.getTarget(SLinkOperations.getTarget(link, LINKS.actorFrom$3cFe), LINKS.actor$8xF) == SLinkOperations.getTarget(SLinkOperations.getTarget(link1, LINKS.actorFrom$3cFe), LINKS.actor$8xF) && SLinkOperations.getTarget(SLinkOperations.getTarget(link, LINKS.actorTo$3d9g), LINKS.actor$8xF) == SLinkOperations.getTarget(SLinkOperations.getTarget(link1, LINKS.actorTo$3d9g), LINKS.actor$8xF) && SPropertyOperations.getString(SLinkOperations.getTarget(link, LINKS.data$Kmlt), PROPS.body$$37E) == SPropertyOperations.getString(SLinkOperations.getTarget(link1, LINKS.data$Kmlt), PROPS.body$$37E)) {
      ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.links$3jtH)).removeElement(link1);
    }
  }
  /*package*/ static void checkDuplicateLinkActorLinksList_id3QVj6nWJKQo(@NotNull SNode __thisNode__, SNode link, SNode list) {
    for (SNode actorLink : ListSequence.fromList(SLinkOperations.getChildren(list, LINKS.links$O5ec))) {
      {
        final SNode l = actorLink;
        if (SNodeOperations.isInstanceOf(l, CONCEPTS.ActorLink$sB)) {
          ActorsGraph__BehaviorDescriptor.checkDuplicateLinkActorLink_id3QVj6nWJKMj.invokeSpecial(__thisNode__, link, l);
        }
      }
      {
        final SNode list1 = actorLink;
        if (SNodeOperations.isInstanceOf(list1, CONCEPTS.ActorLinksList$l3)) {
          ActorsGraph__BehaviorDescriptor.checkDuplicateLinkActorLinksList_id3QVj6nWJKQo.invokeSpecial(__thisNode__, link, list1);
        }
      }
    }
  }

  /*package*/ ActorsGraph__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        checkDupLinks_id3QVj6nWOkkX(node);
        return null;
      case 1:
        checkDuplicateLinkList_id3QVj6nWOl3C(node, (SNode) parameters[0]);
        return null;
      case 2:
        checkDuplicateLink_id3QVj6nWJGTI(node, (SNode) parameters[0]);
        return null;
      case 3:
        checkDuplicateLinkActorLink_id3QVj6nWJKMj(node, (SNode) parameters[0], (SNode) parameters[1]);
        return null;
      case 4:
        checkDuplicateLinkActorLinksList_id3QVj6nWJKQo(node, (SNode) parameters[0], (SNode) parameters[1]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ActorLink$sB = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x262cd812cfe57938L, "ActorLanguage.structure.ActorLink");
    /*package*/ static final SConcept ActorLinksList$l3 = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x6b33cca6412e20a5L, "ActorLanguage.structure.ActorLinksList");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink links$3jtH = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x262cd812cfe57936L, 0x262cd812cfe5797cL, "links");
    /*package*/ static final SContainmentLink links$O5ec = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x6b33cca6412e20a5L, 0x6b33cca6412e20a8L, "links");
    /*package*/ static final SContainmentLink data$Kmlt = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x262cd812cfe57938L, 0x779e899a2deb7c19L, "data");
    /*package*/ static final SReferenceLink actorFrom$3cFe = MetaAdapterFactory.getReferenceLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x262cd812cfe57938L, 0x262cd812cfe57974L, "actorFrom");
    /*package*/ static final SReferenceLink actor$8xF = MetaAdapterFactory.getReferenceLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x262cd812cfe57937L, 0x262cd812cfe57939L, "actor");
    /*package*/ static final SReferenceLink actorTo$3d9g = MetaAdapterFactory.getReferenceLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x262cd812cfe57938L, 0x262cd812cfe57976L, "actorTo");
  }

  private static final class PROPS {
    /*package*/ static final SProperty body$$37E = MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body");
  }
}
