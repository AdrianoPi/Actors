package ActorLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractActor;
  private ConceptPresentation props_AbstractBehavior;
  private ConceptPresentation props_Actor;
  private ConceptPresentation props_ActorAction;
  private ConceptPresentation props_ActorScript;
  private ConceptPresentation props_CreateBehavior;
  private ConceptPresentation props_CreateEnvelope;
  private ConceptPresentation props_CreateMessage;
  private ConceptPresentation props_CreatePayload;
  private ConceptPresentation props_Envelope;
  private ConceptPresentation props_Fetch;
  private ConceptPresentation props_MessageQueue;
  private ConceptPresentation props_MessageRef;
  private ConceptPresentation props_Payload;
  private ConceptPresentation props_SelectBehavior;
  private ConceptPresentation props_SelectEnvelope;
  private ConceptPresentation props_SelectPayload;
  private ConceptPresentation props_SendMessage;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractActor:
        if (props_AbstractActor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractActor = cpb.create();
        }
        return props_AbstractActor;
      case LanguageConceptSwitch.AbstractBehavior:
        if (props_AbstractBehavior == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractBehavior = cpb.create();
        }
        return props_AbstractBehavior;
      case LanguageConceptSwitch.Actor:
        if (props_Actor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Actor = cpb.create();
        }
        return props_Actor;
      case LanguageConceptSwitch.ActorAction:
        if (props_ActorAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActorAction = cpb.create();
        }
        return props_ActorAction;
      case LanguageConceptSwitch.ActorScript:
        if (props_ActorScript == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ActorScript = cpb.create();
        }
        return props_ActorScript;
      case LanguageConceptSwitch.CreateBehavior:
        if (props_CreateBehavior == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CreateBehavior = cpb.create();
        }
        return props_CreateBehavior;
      case LanguageConceptSwitch.CreateEnvelope:
        if (props_CreateEnvelope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CreateEnvelope = cpb.create();
        }
        return props_CreateEnvelope;
      case LanguageConceptSwitch.CreateMessage:
        if (props_CreateMessage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CreateMessage = cpb.create();
        }
        return props_CreateMessage;
      case LanguageConceptSwitch.CreatePayload:
        if (props_CreatePayload == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CreatePayload = cpb.create();
        }
        return props_CreatePayload;
      case LanguageConceptSwitch.Envelope:
        if (props_Envelope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Envelope = cpb.create();
        }
        return props_Envelope;
      case LanguageConceptSwitch.Fetch:
        if (props_Fetch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("fetch_message");
          props_Fetch = cpb.create();
        }
        return props_Fetch;
      case LanguageConceptSwitch.MessageQueue:
        if (props_MessageQueue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MessageQueue = cpb.create();
        }
        return props_MessageQueue;
      case LanguageConceptSwitch.MessageRef:
        if (props_MessageRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x6ac9b580f420bedcL, 0x6ac9b580f420beddL, "message", "", "");
          props_MessageRef = cpb.create();
        }
        return props_MessageRef;
      case LanguageConceptSwitch.Payload:
        if (props_Payload == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Payload = cpb.create();
        }
        return props_Payload;
      case LanguageConceptSwitch.SelectBehavior:
        if (props_SelectBehavior == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x619ceb9024171024L, 0x619ceb9024171025L, "behavior", "", "");
          props_SelectBehavior = cpb.create();
        }
        return props_SelectBehavior;
      case LanguageConceptSwitch.SelectEnvelope:
        if (props_SelectEnvelope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x9de89b125bf6283L, 0x9de89b125bf6284L, "envelope", "", "");
          props_SelectEnvelope = cpb.create();
        }
        return props_SelectEnvelope;
      case LanguageConceptSwitch.SelectPayload:
        if (props_SelectPayload == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x4658738496c93a82L, 0x4658738496c93a91L, "payload", "", "");
          props_SelectPayload = cpb.create();
        }
        return props_SelectPayload;
      case LanguageConceptSwitch.SendMessage:
        if (props_SendMessage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("send_message");
          props_SendMessage = cpb.create();
        }
        return props_SendMessage;
    }
    return null;
  }
}
