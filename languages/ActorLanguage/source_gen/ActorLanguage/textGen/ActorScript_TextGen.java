package ActorLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class ActorScript_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    Initialization.init(ctx);

    for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.actors$EA0a)) {
      tgs.appendNode(item);
    }
    tgs.newLine();

    tgs.append("int main() {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("int num_threads = ");
    tgs.append(String.valueOf(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.actors$EA0a).size()));
    tgs.append(";");
    tgs.newLine();
    tgs.indent();
    tgs.append("pthread_t threads[num_threads];");
    tgs.newLine();
    tgs.indent();
    tgs.append("int i;");
    tgs.newLine();
    tgs.indent();
    tgs.append("int addresses[");
    tgs.append(String.valueOf(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.actors$EA0a).size()));
    tgs.append("];");
    tgs.newLine();
    for (SNode actor : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.actors$EA0a))) {
      tgs.indent();
      tgs.append("addresses[");
      tgs.append(String.valueOf(SNodeOperations.getIndexInParent(actor)));
      tgs.append("] = ");
      tgs.append(String.valueOf(SPropertyOperations.getInteger(actor, PROPS.address$Eakk)));
      tgs.append(";");
      tgs.newLine();
    }
    tgs.newLine();

    tgs.indent();
    tgs.append("pthread_mutex_init(&map_mutex, NULL);");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("map_item *map = malloc(sizeof(map_item)*SIZE);");
    tgs.newLine();
    tgs.indent();
    tgs.append("if (!map) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("perror(\"malloc\");");
    tgs.newLine();
    tgs.indent();
    tgs.append("exit(EXIT_FAILURE);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("for (int i = 0; i < SIZE; ++i) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("pthread_mutex_init(&map[i].mutex, NULL);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();

    for (SNode actor : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.actors$EA0a))) {
      tgs.indent();
      tgs.append("create_thread(addresses[");
      tgs.append(String.valueOf(SNodeOperations.getIndexInParent(actor)));
      tgs.append("], map, ");
      tgs.append(SPropertyOperations.getString(actor, PROPS.name$MnvL));
      tgs.append(", &threads[");
      tgs.append(String.valueOf(SNodeOperations.getIndexInParent(actor)));
      tgs.append("]);");
      tgs.newLine();
    }

    tgs.newLine();

    tgs.indent();
    tgs.append("for (int i = 0; i < num_threads; i++) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("pthread_join(threads[i], NULL);");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();

    tgs.indent();
    tgs.append("free(map);");
    tgs.newLine();
    tgs.indent();
    tgs.append("return 0;");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.append("}");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink actors$EA0a = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23376L, 0x35a5eccbf2f23377L, "actors");
  }

  private static final class PROPS {
    /*package*/ static final SProperty address$Eakk = MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23308L, 0x35a5eccbf2f23360L, "address");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
