package ActorLanguage.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;

public abstract class WindowSwitchCase {
  public static void AppendWindow(int address, final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("case ");
    tgs.append(String.valueOf(address));
    tgs.append(":");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("/* WINDOW */");
    tgs.newLine();
    tgs.indent();
    tgs.append("switch(event_type) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("case LP_INIT:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("WindowInit(topology, 0, me);");
    tgs.newLine();
    tgs.indent();
    tgs.append("break;");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("case EVENT:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("Window(topology, me, now, content, s, 5.0);");
    tgs.newLine();
    tgs.indent();
    tgs.append("break;");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("case LP_FINI:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("WindowCleanUp((WindowData *)s);");
    tgs.newLine();
    tgs.indent();
    tgs.append("break;");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("case TERMINATE:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("window_data = (WindowData *)s;");
    tgs.newLine();
    tgs.indent();
    tgs.append("window_data->can_end = true;");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("// flush window");
    tgs.newLine();
    tgs.indent();
    tgs.append("window_data->list->num_rows = window_data->received_tuples;");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("RowsList *copy_list = rs_malloc(sizeof(RowsList));");
    tgs.newLine();
    tgs.indent();
    tgs.append("CHECK_RSMALLOC(copy_list);");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("copy_list->num_rows = window_data->received_tuples;");
    tgs.newLine();
    tgs.indent();
    tgs.append("copy_list->rows = rs_malloc(sizeof(Row) * window_data->window_size);");
    tgs.newLine();
    tgs.indent();
    tgs.append("CHECK_RSMALLOC(copy_list->rows);");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("for (int i = 0; i < window_data->list->num_rows; i++) {");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("copy_list->rows[i] = window_data->list->rows[i];");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("CreateAndSendRowsMessage(topology, me, 5.0, copy_list, now);");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("rs_free(window_data->list->rows);");
    tgs.newLine();
    tgs.indent();
    tgs.append("rs_free(window_data->list);");
    tgs.newLine();
    tgs.newLine();
    tgs.indent();
    tgs.append("ForwardTerminationMessage(topology, me, now);");
    tgs.newLine();
    tgs.indent();
    tgs.append("break;");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("default:");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.indent();
    tgs.append("fprintf(stderr, \"Unknown event type\");");
    tgs.newLine();
    tgs.indent();
    tgs.append("puts(\"\");");
    tgs.newLine();
    tgs.indent();
    tgs.append("abort();");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    ctx.getBuffer().area().decreaseIndent();
    tgs.indent();
    tgs.append("}");
    tgs.newLine();
    tgs.indent();
    tgs.append("break;");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
    ctx.getBuffer().area().decreaseIndent();
  }
}
