package ActorLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class FetchFactory {
  public static class NodeFactory_4813801747213164451 implements NodeFactory {
    public void setup(final SNode newNode, SNode sampleNode, SNode enclosingNode, int index, SModel model) {
      SLinkOperations.setTarget(newNode, LINKS.message$diNF, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23371L, "ActorLanguage.structure.CreateMessage")));

      int receivedMessages = 0;

      Iterable<SNode> existingMessages = ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getNodeAncestor(newNode, CONCEPTS.CreateActor$Uv, false, false), CONCEPTS.CreateMessage$aX, false, new SAbstractConcept[]{})).where((it) -> it != SLinkOperations.getTarget(newNode, LINKS.message$diNF));

      if (Sequence.fromIterable(existingMessages).isNotEmpty()) {
        for (SNode message : Sequence.fromIterable(existingMessages)) {
          if (SPropertyOperations.getString(message, PROPS.name$MnvL).contains("rec_message")) {
            receivedMessages++;
          }
        }
      }

      SPropertyOperations.assign(SLinkOperations.getTarget(newNode, LINKS.message$diNF), PROPS.name$MnvL, "rec_message" + receivedMessages);

      SLinkOperations.setTarget(SLinkOperations.getTarget(newNode, LINKS.message$diNF), LINKS.payload$N_RC, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2176abe574366688L, "ActorLanguage.structure.CreatePayload")));
      SPropertyOperations.assign(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(newNode, LINKS.message$diNF), LINKS.payload$N_RC), CONCEPTS.CreatePayload$Pf), PROPS.name$MnvL, SPropertyOperations.getString(SLinkOperations.getTarget(newNode, LINKS.message$diNF), PROPS.name$MnvL) + ".payload");

    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink message$diNF = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x619ceb90241d8975L, 0x6ac9b580f41c3451L, "message");
    /*package*/ static final SContainmentLink payload$N_RC = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23371L, 0x9de89b125a71571L, "payload");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept CreateActor$Uv = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23364L, "ActorLanguage.structure.CreateActor");
    /*package*/ static final SConcept CreateMessage$aX = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x35a5eccbf2f23371L, "ActorLanguage.structure.CreateMessage");
    /*package*/ static final SConcept CreatePayload$Pf = MetaAdapterFactory.getConcept(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2176abe574366688L, "ActorLanguage.structure.CreatePayload");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
