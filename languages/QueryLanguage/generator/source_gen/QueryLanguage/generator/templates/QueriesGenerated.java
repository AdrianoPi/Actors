package QueryLanguage.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Objects;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SNodeMatcher;
import QueryLanguage.behavior.Script__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.TemplateArgumentContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.ArrayList;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import QueryLanguage.behavior.MultipleCondition__BehaviorDescriptor;
import jetbrains.mps.generator.template.TemplateQueryContext;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.IfMacroCondition;
import jetbrains.mps.generator.impl.query.ReferenceTargetQuery;
import jetbrains.mps.generator.impl.query.CallArgumentQuery;
import jetbrains.mps.generator.impl.query.LabelInputQuery;
import jetbrains.mps.generator.template.LabelKeyQueryContext;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean rule_Condition_6_0(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q) != null);
  }
  public static boolean rule_Condition_6_1(final BaseMappingRuleContext _context) {
    return !(Objects.equals(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM).get(0).getConcept(), CONCEPTS.AllColumns$eP));
  }
  public static boolean rule_Condition_6_2(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB) != null);
  }
  public static boolean rule_Condition_6_3(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v) != null);
  }
  public static boolean rule_Condition_6_4(final BaseMappingRuleContext _context) {
    return (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null)) != null);
  }
  public static boolean rule_Condition_8_0(final BaseMappingRuleContext _context) {
    return !(Objects.equals(SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).getElement(0)), CONCEPTS.AllColumns$eP));
  }
  public static boolean rule_Condition_8_1(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB) != null);
  }
  public static boolean rule_Condition_8_2(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v) != null);
  }
  public static boolean rule_Condition_8_3(final BaseMappingRuleContext _context) {
    return (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null)) != null);
  }
  public static boolean rule_Condition_9_0(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB) != null);
  }
  public static boolean rule_Condition_9_1(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v) != null);
  }
  public static boolean rule_Condition_9_2(final BaseMappingRuleContext _context) {
    return (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null)) != null);
  }
  public static boolean rule_Condition_10_0(final BaseMappingRuleContext _context) {
    return (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null)) != null);
  }
  public static boolean rule_Condition_10_1(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v) != null);
  }
  public static boolean rule_Condition_11_0(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q) != null);
  }
  public static boolean rule_Condition_11_1(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q) == null);
  }
  public static boolean rule_Condition_12_0(final BaseMappingRuleContext _context) {
    return !(Objects.equals(SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).getElement(0)), CONCEPTS.AllColumns$eP));
  }
  public static boolean rule_Condition_12_1(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB) != null);
  }
  public static boolean rule_Condition_12_2(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v) != null);
  }
  public static boolean rule_Condition_12_3(final BaseMappingRuleContext _context) {
    return (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null)) != null);
  }
  public static boolean rule_Condition_14_0(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0) == null);
  }
  public static boolean rule_Condition_14_1(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0) != null);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SNodeOperations.getConcept(_context.getNode()).getName();
  }
  public static Object propertyMacro_GetValue_1_1(final PropertyMacroContext _context) {
    return _context.createUniqueName("select", _context.getNode());
  }
  public static Object propertyMacro_GetValue_1_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_4_0(final PropertyMacroContext _context) {
    return "proj_query" + SNodeOperations.getIndexInParent(_context.getNode());
  }
  public static Object propertyMacro_GetValue_4_1(final PropertyMacroContext _context) {
    return "join_query" + SNodeOperations.getIndexInParent(_context.getNode());
  }
  public static Object propertyMacro_GetValue_4_2(final PropertyMacroContext _context) {
    return "groupBy_query" + SNodeOperations.getIndexInParent(_context.getNode());
  }
  public static Object propertyMacro_GetValue_4_3(final PropertyMacroContext _context) {
    return "orderBy_query" + SNodeOperations.getIndexInParent(_context.getNode());
  }
  public static Object propertyMacro_GetValue_4_4(final PropertyMacroContext _context) {
    for (SNode col : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM))) {
      if ((SLinkOperations.getTarget(col, LINKS.aggregationFunction$8ryB) != null)) {
        return SNodeOperations.getConcept(SLinkOperations.getTarget(col, LINKS.aggregationFunction$8ryB)).getName() + "_query" + SNodeOperations.getIndexInParent(_context.getNode());
      }
    }
    return null;
  }
  public static Object propertyMacro_GetValue_6_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q), PROPS.textualCondition$n5ly);
  }
  public static Object propertyMacro_GetValue_6_1(final PropertyMacroContext _context) {
    String ret = "";
    for (SNode col : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM))) {
      {
        final SNode colRef = col;
        if (SNodeOperations.isInstanceOf(colRef, CONCEPTS.ColumnRef$XM)) {
          if (SNodeOperations.getIndexInParent(col) == ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).count() - 1) {
            ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
          } else {
            ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ",";
          }
        }
      }
    }
    return ret;
  }
  public static Object propertyMacro_GetValue_6_2(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB), LINKS.columns$JBv$);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
      } else {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ", ";
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_6_3(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v), LINKS.columns$Hhkv);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
      } else {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ", ";
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_6_4(final PropertyMacroContext _context) {
    SNode selectColumn = ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null));
    {
      final SNode allColumns = selectColumn;
      if (SNodeOperations.isInstanceOf(allColumns, CONCEPTS.AllColumns$eP)) {
        return "*";
      }
    }
    {
      final SNode columnRef = selectColumn;
      if (SNodeOperations.isInstanceOf(columnRef, CONCEPTS.ColumnRef$XM)) {
        return SPropertyOperations.getString(SLinkOperations.getTarget(columnRef, LINKS.column$Wyeu), PROPS.name$MnvL);
      }
    }
    return null;
  }
  public static Object propertyMacro_GetValue_8_0(final PropertyMacroContext _context) {
    String ret = "";
    for (SNode col : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM))) {
      {
        final SNode colRef = col;
        if (SNodeOperations.isInstanceOf(colRef, CONCEPTS.ColumnRef$XM)) {
          if (SNodeOperations.getIndexInParent(col) == ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).count() - 1) {
            ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
          } else {
            ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ",";
          }
        }
      }
    }
    return ret;
  }
  public static Object propertyMacro_GetValue_8_1(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB), LINKS.columns$JBv$);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
      } else {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ", ";
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_8_2(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v), LINKS.columns$Hhkv);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
      } else {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ", ";
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_8_3(final PropertyMacroContext _context) {
    SNode selectColumn = ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null));
    {
      final SNode allColumns = selectColumn;
      if (SNodeOperations.isInstanceOf(allColumns, CONCEPTS.AllColumns$eP)) {
        return "*";
      }
    }
    {
      final SNode columnRef = selectColumn;
      if (SNodeOperations.isInstanceOf(columnRef, CONCEPTS.ColumnRef$XM)) {
        return SPropertyOperations.getString(SLinkOperations.getTarget(columnRef, LINKS.column$Wyeu), PROPS.name$MnvL);
      }
    }
    return null;
  }
  public static Object propertyMacro_GetValue_9_0(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB), LINKS.columns$JBv$);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
        } else {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
        }
      } else {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL) + ", ";
        } else {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ", ";
        }
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_9_1(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v), LINKS.columns$Hhkv);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
        } else {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
        }
      } else {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL) + ", ";
        } else {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ", ";
        }
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_9_2(final PropertyMacroContext _context) {
    SNode selectColumn = ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null));
    {
      final SNode allColumns = selectColumn;
      if (SNodeOperations.isInstanceOf(allColumns, CONCEPTS.AllColumns$eP)) {
        return "*";
      }
    }
    {
      final SNode columnRef = selectColumn;
      if (SNodeOperations.isInstanceOf(columnRef, CONCEPTS.ColumnRef$XM)) {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          return SPropertyOperations.getString(SLinkOperations.getTarget(columnRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
        }
        return SPropertyOperations.getString(SLinkOperations.getTarget(columnRef, LINKS.column$Wyeu), PROPS.name$MnvL);
      }
    }
    return null;
  }
  public static Object propertyMacro_GetValue_10_0(final PropertyMacroContext _context) {
    SNode selectColumn = ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null));
    {
      final SNode allColumns = selectColumn;
      if (SNodeOperations.isInstanceOf(allColumns, CONCEPTS.AllColumns$eP)) {
        return "*";
      }
    }
    {
      final SNode columnRef = selectColumn;
      if (SNodeOperations.isInstanceOf(columnRef, CONCEPTS.ColumnRef$XM)) {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          return SPropertyOperations.getString(SLinkOperations.getTarget(columnRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
        }
        return SPropertyOperations.getString(SLinkOperations.getTarget(columnRef, LINKS.column$Wyeu), PROPS.name$MnvL);
      }
    }
    return null;
  }
  public static Object propertyMacro_GetValue_10_1(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v), LINKS.columns$Hhkv);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
        } else {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
        }
      } else {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL) + ", ";
        } else {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ", ";
        }
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_11_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), PROPS.textualCondition$n5ly);
  }
  public static Object propertyMacro_GetValue_11_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.joinCondition$rc3m), LINKS.leftColumn$NKe0), LINKS.column$Wyeu), PROPS.name$MnvL) + SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.joinCondition$rc3m), LINKS.rightColumn$NKG2), LINKS.column$Wyeu), PROPS.name$MnvL);
  }
  public static Object propertyMacro_GetValue_12_0(final PropertyMacroContext _context) {
    String ret = "";
    for (SNode col : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM))) {
      {
        final SNode colRef = col;
        if (SNodeOperations.isInstanceOf(colRef, CONCEPTS.ColumnRef$XM)) {
          if (SNodeOperations.getIndexInParent(col) == ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).count() - 1) {
            ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
          } else {
            ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL) + ",";
          }
        }
      }
    }
    return ret;
  }
  public static Object propertyMacro_GetValue_12_1(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB), LINKS.columns$JBv$);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
      } else {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL) + ", ";
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_12_2(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v), LINKS.columns$Hhkv);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
      } else {
        ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL) + ", ";
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_12_3(final PropertyMacroContext _context) {
    SNode selectColumn = ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null));
    {
      final SNode allColumns = selectColumn;
      if (SNodeOperations.isInstanceOf(allColumns, CONCEPTS.AllColumns$eP)) {
        return "*";
      }
    }
    {
      final SNode columnRef = selectColumn;
      if (SNodeOperations.isInstanceOf(columnRef, CONCEPTS.ColumnRef$XM)) {
        return SPropertyOperations.getString(SLinkOperations.getTarget(columnRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
      }
    }
    return null;
  }
  public static Object propertyMacro_GetValue_13_0(final PropertyMacroContext _context) {
    SNode table = null;
    {
      final SNode simpleCondition = _context.getNode();
      if (SNodeOperations.isInstanceOf(simpleCondition, CONCEPTS.SimpleCondition$89)) {
        table = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(SLinkOperations.getTarget(simpleCondition, LINKS.column$Aee5), LINKS.column$Wyeu), CONCEPTS.CreateTable$ca, false, false);
      }
    }
    {
      final SNode multipleCondition = _context.getNode();
      if (SNodeOperations.isInstanceOf(multipleCondition, CONCEPTS.MultipleCondition$9A)) {
        SNode c = multipleCondition;
        while (true) {
          if (SNodeOperations.isInstanceOf(c, CONCEPTS.MultipleCondition$9A)) {
            c = SLinkOperations.getTarget(SNodeOperations.cast(c, CONCEPTS.MultipleCondition$9A), LINKS.conditionDx$A_03);
          } else {
            table = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(c, CONCEPTS.SimpleCondition$89), LINKS.column$Aee5), LINKS.column$Wyeu), CONCEPTS.CreateTable$ca, false, false);
            break;
          }
        }
      }
    }

    if (SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.joinCondition$rc3m), LINKS.leftColumn$NKe0), LINKS.column$Wyeu), CONCEPTS.CreateTable$ca, false, false) == table) {
      return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.joinCondition$rc3m), LINKS.leftColumn$NKe0), LINKS.column$Wyeu), PROPS.fullName$t1KL);
    }
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.joinCondition$rc3m), LINKS.rightColumn$NKG2), LINKS.column$Wyeu), PROPS.fullName$t1KL);
  }
  public static Object propertyMacro_GetValue_13_1(final PropertyMacroContext _context) {
    String ret = "";
    List<SNode> cols = SLinkOperations.getChildren(SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v), LINKS.columns$Hhkv);
    for (SNode colRef : ListSequence.fromList(cols)) {
      if (SNodeOperations.getIndexInParent(colRef) == ListSequence.fromList(cols).count() - 1) {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL);
        } else {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL);
        }
      } else {
        if (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1) {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.fullName$t1KL) + ", ";
        } else {
          ret = ret + SPropertyOperations.getString(SLinkOperations.getTarget(colRef, LINKS.column$Wyeu), PROPS.name$MnvL) + ", ";
        }
      }
    }

    return ret;
  }
  public static Object propertyMacro_GetValue_14_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.joinCondition$rc3m), LINKS.leftColumn$NKe0), LINKS.column$Wyeu), PROPS.fullName$t1KL) + ", " + SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.joinCondition$rc3m), LINKS.rightColumn$NKG2), LINKS.column$Wyeu), PROPS.fullName$t1KL);
  }
  public static Object referenceMacro_GetReferent_2_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "SelectionActor");
  }
  public static Object referenceMacro_GetReferent_2_1(final ReferenceMacroContext _context) {
    return ListSequence.fromList(_context.getAllOutputNodesByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), "SelectionActor")).getElement((Integer) _context.getVariable("loop:index"));
  }
  public static Object referenceMacro_GetReferent_2_2(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "ProjectionActor");
  }
  public static Object referenceMacro_GetReferent_2_3(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "JoinActor");
  }
  public static Object referenceMacro_GetReferent_2_4(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "GroupByActor");
  }
  public static Object referenceMacro_GetReferent_2_5(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "OrderByActor");
  }
  public static Object referenceMacro_GetReferent_2_6(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "AggregateFunctionActor");
  }
  public static Object referenceMacro_GetReferent_3_0(final ReferenceMacroContext _context) {
    return ListSequence.fromList(_context.getAllOutputNodesByInputNodeAndMappingLabel(_context.getNode(), "SelectionActor")).getElement(((Integer) _context.getVariable("index")));
  }
  public static Object referenceMacro_GetReferent_4_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null)), LINKS.aggregationFunction$8ryB), "aggFunctionBehavior");
  }
  public static Object referenceMacro_GetReferent_5_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "AggregateFunctionActorBox");
  }
  public static Object referenceMacro_GetReferent_5_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "OrderByActorBox");
  }
  public static Object referenceMacro_GetReferent_6_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
  }
  public static Object referenceMacro_GetReferent_6_1(final ReferenceMacroContext _context) {

    SNode aliasDefQuery = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).getElement(0), LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false);

    if ((aliasDefQuery == null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), "DataSourceActorBox");
    }

    if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.aggregateFunction$GMhu) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "AggregateFunctionActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.orderBy$K96v) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "OrderByActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.groupBy$vhgB) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "GroupByActorBox");
    } else if (!(Objects.equals(SLinkOperations.getChildren(aliasDefQuery, LINKS.cols$kMcM).get(0).getConcept(), CONCEPTS.AllColumns$eP))) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "ProjectionActorBox");
    } else {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "SelectionActorBox");
    }
  }
  public static Object referenceMacro_GetReferent_6_2(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "ProjectionActorBox");
  }
  public static Object referenceMacro_GetReferent_6_3(final ReferenceMacroContext _context) {
    SNode aliasDefQuery = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).getElement(0), LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false);

    if ((aliasDefQuery == null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), "DataSourceActorBox");
    }

    if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.aggregateFunction$GMhu) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "AggregateFunctionActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.orderBy$K96v) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "OrderByActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.groupBy$vhgB) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "GroupByActorBox");
    } else if (!(Objects.equals(SLinkOperations.getChildren(aliasDefQuery, LINKS.cols$kMcM).get(0).getConcept(), CONCEPTS.AllColumns$eP))) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "ProjectionActorBox");
    } else {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "SelectionActorBox");
    }
  }
  public static Object referenceMacro_GetReferent_6_4(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "GroupByActorBox");
  }
  public static Object referenceMacro_GetReferent_6_5(final ReferenceMacroContext _context) {
    SNode aliasDefQuery = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).getElement(0), LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false);

    if ((aliasDefQuery == null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), "DataSourceActorBox");
    }

    if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.aggregateFunction$GMhu) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "AggregateFunctionActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.orderBy$K96v) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "OrderByActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.groupBy$vhgB) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "GroupByActorBox");
    } else if (!(Objects.equals(SLinkOperations.getChildren(aliasDefQuery, LINKS.cols$kMcM).get(0).getConcept(), CONCEPTS.AllColumns$eP))) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "ProjectionActorBox");
    } else {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "SelectionActorBox");
    }
  }
  public static Object referenceMacro_GetReferent_6_6(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "OrderByActorBox");
  }
  public static Object referenceMacro_GetReferent_6_7(final ReferenceMacroContext _context) {
    SNode aliasDefQuery = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).getElement(0), LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false);

    if ((aliasDefQuery == null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), "DataSourceActorBox");
    }

    if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.aggregateFunction$GMhu) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "AggregateFunctionActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.orderBy$K96v) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "OrderByActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.groupBy$vhgB) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "GroupByActorBox");
    } else if (!(Objects.equals(SLinkOperations.getChildren(aliasDefQuery, LINKS.cols$kMcM).get(0).getConcept(), CONCEPTS.AllColumns$eP))) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "ProjectionActorBox");
    } else {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "SelectionActorBox");
    }

  }
  public static Object referenceMacro_GetReferent_6_8(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "AggregateFunctionActorBox");
  }
  public static Object referenceMacro_GetReferent_6_9(final ReferenceMacroContext _context) {
    SNode aliasDefQuery = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).getElement(0), LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false);

    if ((aliasDefQuery == null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), "DataSourceActorBox");
    }

    if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.aggregateFunction$GMhu) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "AggregateFunctionActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.orderBy$K96v) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "OrderByActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefQuery, LINKS.groupBy$vhgB) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "GroupByActorBox");
    } else if (!(Objects.equals(SLinkOperations.getChildren(aliasDefQuery, LINKS.cols$kMcM).get(0).getConcept(), CONCEPTS.AllColumns$eP))) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "ProjectionActorBox");
    } else {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefQuery, "SelectionActorBox");
    }
  }
  public static Object referenceMacro_GetReferent_8_0(final ReferenceMacroContext _context) {
    SNode actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
    if ((actorBox != null)) {
      return actorBox;
    }

    for (SNode select : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> new SNodeMatcher().match(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.where$e1s0), LINKS.condition$d94q), SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q)))) {
      actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
      if ((actorBox != null)) {
        return actorBox;
      }
    }

    return null;
  }
  public static Object referenceMacro_GetReferent_8_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "ProjectionActorBox");
  }
  public static Object referenceMacro_GetReferent_8_2(final ReferenceMacroContext _context) {
    SNode actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
    if ((actorBox == null)) {
      return actorBox;
    }

    for (SNode select : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> new SNodeMatcher().match(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.where$e1s0), LINKS.condition$d94q), SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q)))) {
      actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
      if ((actorBox != null)) {
        return actorBox;
      }
    }

    return null;
  }
  public static Object referenceMacro_GetReferent_8_3(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "GroupByActorBox");
  }
  public static Object referenceMacro_GetReferent_8_4(final ReferenceMacroContext _context) {
    SNode actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
    if ((actorBox != null)) {
      for (SNode select : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> new SNodeMatcher().match(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.where$e1s0), LINKS.condition$d94q), SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q)))) {
        actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
        if ((actorBox != null)) {
          return actorBox;
        }
      }
    }
    return null;
  }
  public static Object referenceMacro_GetReferent_8_5(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "OrderByActorBox");
  }
  public static Object referenceMacro_GetReferent_8_6(final ReferenceMacroContext _context) {
    SNode actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
    if ((actorBox != null)) {
      return actorBox;
    }
    for (SNode select : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> new SNodeMatcher().match(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.where$e1s0), LINKS.condition$d94q), SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q)))) {
      actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
      if ((actorBox != null)) {
        return actorBox;
      }
    }
    return null;
  }
  public static Object referenceMacro_GetReferent_8_7(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "AggregateFunctionActorBox");
  }
  public static Object referenceMacro_GetReferent_9_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "ProjectionActorBox");
  }
  public static Object referenceMacro_GetReferent_9_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "GroupByActorBox");
  }
  public static Object referenceMacro_GetReferent_9_2(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "ProjectionActorBox");
  }
  public static Object referenceMacro_GetReferent_9_3(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "OrderByActorBox");
  }
  public static Object referenceMacro_GetReferent_9_4(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "ProjectionActorBox");
  }
  public static Object referenceMacro_GetReferent_9_5(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "AggregateFunctionActorBox");
  }
  public static Object referenceMacro_GetReferent_10_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "GroupByActorBox");
  }
  public static Object referenceMacro_GetReferent_10_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "AggregateFunctionActorBox");
  }
  public static Object referenceMacro_GetReferent_10_2(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "GroupByActorBox");
  }
  public static Object referenceMacro_GetReferent_10_3(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "OrderByActorBox");
  }
  public static Object referenceMacro_GetReferent_11_0(final ReferenceMacroContext _context) {
    SNode actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "SelectionActorBoxFromCondition");
    if ((actorBox != null)) {
      return actorBox;
    }
    for (SNode select : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> new SNodeMatcher().match(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.where$e1s0), LINKS.condition$d94q), _context.getNode()))) {
      actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
      if ((actorBox != null)) {
        return actorBox;
      }
    }
    return null;
  }
  public static Object referenceMacro_GetReferent_11_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "JoinActorBox");
  }
  public static Object referenceMacro_GetReferent_12_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "JoinActorBox");
  }
  public static Object referenceMacro_GetReferent_12_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "ProjectionActorBox");
  }
  public static Object referenceMacro_GetReferent_12_2(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "JoinActorBox");
  }
  public static Object referenceMacro_GetReferent_12_3(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "GroupByActorBox");
  }
  public static Object referenceMacro_GetReferent_12_4(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "JoinActorBox");
  }
  public static Object referenceMacro_GetReferent_12_5(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "OrderByActorBox");
  }
  public static Object referenceMacro_GetReferent_12_6(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "JoinActorBox");
  }
  public static Object referenceMacro_GetReferent_12_7(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "AggregateFunctionActorBox");
  }
  public static Object referenceMacro_GetReferent_13_0(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), "JoinActorBox");
  }
  public static Object referenceMacro_GetReferent_13_1(final ReferenceMacroContext _context) {
    SNode actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "SelectionActorBoxFromCondition");
    if ((actorBox != null)) {
      return actorBox;
    }

    for (SNode select : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> new SNodeMatcher().match(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.where$e1s0), LINKS.condition$d94q), SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.where$e1s0), LINKS.condition$d94q)))) {
      actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(ListSequence.fromList(Script__BehaviorDescriptor.findAllSingleTableConditions_id4BxYaol$2qr.invoke(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q))).getElement((Integer) _context.getVariable("loop:index")), "SelectionActorBoxFromCondition");
      if ((actorBox != null)) {
        return actorBox;
      }
    }


    return null;
  }
  public static Object referenceMacro_GetReferent_13_2(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "AggregateFunctionActorBox");
  }
  public static Object referenceMacro_GetReferent_13_3(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "OrderByActorBox");
  }
  public static Object referenceMacro_GetReferent_14_0(final ReferenceMacroContext _context) {

    SNode aliasDefinitionQuery = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(_context.getNode(), LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false);

    if ((aliasDefinitionQuery == null)) {
      // this is not an alias table
      return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), "DataSourceActorBox");
    }

    // this is an alias table
    if ((SLinkOperations.getTarget(aliasDefinitionQuery, LINKS.aggregateFunction$GMhu) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "AggregateFunctionActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefinitionQuery, LINKS.orderBy$K96v) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "OrderByActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefinitionQuery, LINKS.groupBy$vhgB) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "GroupByActorBox");
    } else if (!(Objects.equals(SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(aliasDefinitionQuery, LINKS.cols$kMcM)).getElement(0)), CONCEPTS.AllColumns$eP))) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "ProjectionActorBox");
    } else {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "SelectionActorBox");
    }
  }
  public static Object referenceMacro_GetReferent_14_1(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), "JoinActorBox");
  }
  public static Object referenceMacro_GetReferent_14_2(final ReferenceMacroContext _context) {
    SNode aliasDefinitionQuery = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(_context.getNode(), LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false);

    if ((aliasDefinitionQuery == null)) {
      // this is not an alias table
      return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), "DataSourceActorBox");
    }

    // this is an alias table
    if ((SLinkOperations.getTarget(aliasDefinitionQuery, LINKS.aggregateFunction$GMhu) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "AggregateFunctionActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefinitionQuery, LINKS.orderBy$K96v) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "OrderByActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefinitionQuery, LINKS.groupBy$vhgB) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "GroupByActorBox");
    } else if (!(Objects.equals(SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(aliasDefinitionQuery, LINKS.cols$kMcM)).getElement(0)), CONCEPTS.AllColumns$eP))) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "ProjectionActorBox");
    } else {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "SelectionActorBox");
    }

  }
  public static Object referenceMacro_GetReferent_14_3(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), "JoinActorBox");
  }
  public static Object referenceMacro_GetReferent_15_0(final ReferenceMacroContext _context) {
    SNode aliasDefinitionQuery = SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(_context.getNode(), LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false);

    if ((aliasDefinitionQuery == null)) {
      // this is not an alias table
      return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), "DataSourceActorBox");
    }

    // this is an alias table

    if ((SLinkOperations.getTarget(aliasDefinitionQuery, LINKS.aggregateFunction$GMhu) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "AggregateFunctionActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefinitionQuery, LINKS.orderBy$K96v) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "OrderByActorBox");
    } else if ((SLinkOperations.getTarget(aliasDefinitionQuery, LINKS.groupBy$vhgB) != null)) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "GroupByActorBox");
    } else if (!(Objects.equals(SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(aliasDefinitionQuery, LINKS.cols$kMcM)).getElement(0)), CONCEPTS.AllColumns$eP))) {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "ProjectionActorBox");
    } else {
      return _context.getOutputNodeByInputNodeAndMappingLabel(aliasDefinitionQuery, "SelectionActorBox");
    }

  }
  public static Object referenceMacro_GetReferent_15_1(final ReferenceMacroContext _context) {
    final Wrappers._T<SNode> thisTableCondition = new Wrappers._T<SNode>(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getInterfaceConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea17L, "QueryLanguage.structure.Condition"))));
    SNode script = SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false);
    List<SNode> allQueryConditions = Script__BehaviorDescriptor.findAllSingleTableConditions_id4BxYaol$2qr.invoke(script, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.where$e1s0), LINKS.condition$d94q));

    for (SNode condition : ListSequence.fromList(allQueryConditions)) {
      if (SLinkOperations.getTarget(_context.getNode(), LINKS.tableRef$boeY) == Script__BehaviorDescriptor.getTableFromCondition_id3lH3Hb9hrb6.invoke(script, condition)) {
        thisTableCondition.value = condition;
      }
    }

    SNode actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(thisTableCondition.value, "SelectionActorBoxFromCondition");
    if ((actorBox != null)) {
      return actorBox;
    }
    for (SNode select : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(script, LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> new SNodeMatcher().match(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.where$e1s0), LINKS.condition$d94q), thisTableCondition.value))) {
      actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
      if ((actorBox != null)) {
        return actorBox;
      }
    }
    return null;
  }
  public static Object referenceMacro_GetReferent_15_2(final ReferenceMacroContext _context) {
    final Wrappers._T<SNode> thisTableCondition = new Wrappers._T<SNode>(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getInterfaceConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea17L, "QueryLanguage.structure.Condition"))));
    SNode script = SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false);
    List<SNode> allQueryConditions = Script__BehaviorDescriptor.findAllSingleTableConditions_id4BxYaol$2qr.invoke(script, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.where$e1s0), LINKS.condition$d94q));

    for (SNode condition : ListSequence.fromList(allQueryConditions)) {
      if (SLinkOperations.getTarget(_context.getNode(), LINKS.tableRef$boeY) == Script__BehaviorDescriptor.getTableFromCondition_id3lH3Hb9hrb6.invoke(script, condition)) {
        thisTableCondition.value = condition;
      }
    }

    SNode actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(thisTableCondition.value, "SelectionActorBoxFromCondition");
    if ((actorBox != null)) {
      return actorBox;
    }
    for (SNode select : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(script, LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> new SNodeMatcher().match(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.where$e1s0), LINKS.condition$d94q), thisTableCondition.value))) {
      actorBox = _context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q), "SelectionActorBoxFromCondition");
      if ((actorBox != null)) {
        return actorBox;
      }
    }
    return null;
  }
  public static Object referenceMacro_GetReferent_15_3(final ReferenceMacroContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), "JoinActorBox");
  }
  public static Object referenceMacro_GetReferent_16_0(final ReferenceMacroContext _context) {
    return ((SNode) _context.getVariable("msg"));
  }
  public static Object referenceMacro_GetReferent_16_1(final ReferenceMacroContext _context) {
    return ((SNode) _context.getVariable("msg"));
  }
  public static Object referenceMacro_GetReferent_16_2(final ReferenceMacroContext _context) {
    return ((SNode) _context.getVariable("msg"));
  }
  public static Object referenceMacro_GetReferent_16_3(final ReferenceMacroContext _context) {
    return ((SNode) _context.getVariable("msg"));
  }
  public static Object referenceMacro_GetReferent_16_4(final ReferenceMacroContext _context) {
    return ((SNode) _context.getVariable("msg"));
  }
  public static boolean ifMacro_Condition_1_0(final IfMacroContext _context) {
    return (Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(_context.getNode(), LINKS.operations$az69), CONCEPTS.Select$Te)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.groupBy$vhgB) != null)) != null);
  }
  public static boolean ifMacro_Condition_1_1(final IfMacroContext _context) {
    return (Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(_context.getNode(), LINKS.operations$az69), CONCEPTS.Select$Te)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.orderBy$K96v) != null)) != null);
  }
  public static boolean ifMacro_Condition_2_0(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() == 1 && (SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0) != null) && (_context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "SelectionActor") != null);
  }
  public static boolean ifMacro_Condition_2_1(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1 && (_context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "SelectionActor") != null);
  }
  public static boolean ifMacro_Condition_2_2(final IfMacroContext _context) {
    return !(Objects.equals(SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).getElement(0)), CONCEPTS.AllColumns$eP));
  }
  public static boolean ifMacro_Condition_2_3(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1;
  }
  public static boolean ifMacro_Condition_2_4(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB) != null);
  }
  public static boolean ifMacro_Condition_2_5(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v) != null);
  }
  public static boolean ifMacro_Condition_2_6(final IfMacroContext _context) {
    return (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null)) != null);
  }
  public static boolean ifMacro_Condition_4_0(final IfMacroContext _context) {
    return !(Objects.equals(SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).getElement(0)), CONCEPTS.AllColumns$eP));
  }
  public static boolean ifMacro_Condition_4_1(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).count() > 1;
  }
  public static boolean ifMacro_Condition_4_2(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB) != null);
  }
  public static boolean ifMacro_Condition_4_3(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v) != null);
  }
  public static boolean ifMacro_Condition_4_4(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).any((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null));
  }
  public static boolean ifMacro_Condition_5_0(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q) != null);
  }
  public static boolean ifMacro_Condition_5_1(final IfMacroContext _context) {
    return !(Objects.equals(SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).getElement(0)), CONCEPTS.AllColumns$eP));
  }
  public static boolean ifMacro_Condition_5_2(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB) != null);
  }
  public static boolean ifMacro_Condition_5_3(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v) != null) && (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null)) != null);
  }
  public static boolean ifMacro_Condition_6_0(final IfMacroContext _context) {
    return (_context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "SelectionActor") != null);
  }
  public static boolean ifMacro_Condition_13_0(final IfMacroContext _context) {
    return (_context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "SelectionActor") != null) && ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).where((it) -> (SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(it, LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false) != null)).isEmpty();
  }
  public static boolean ifMacro_Condition_13_1(final IfMacroContext _context) {
    return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).where((it) -> (SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(it, LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false) != null)).isNotEmpty();
  }
  public static boolean ifMacro_Condition_13_2(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q) != null) && ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn)).where((it) -> (SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(it, LINKS.tableRef$boeY), CONCEPTS.Select$Te, false, false) != null)).isEmpty();
  }
  public static boolean ifMacro_Condition_13_3(final IfMacroContext _context) {
    return !(Objects.equals(SNodeOperations.getConcept(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).getElement(0)), CONCEPTS.AllColumns$eP));
  }
  public static boolean ifMacro_Condition_13_4(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.groupBy$vhgB) != null);
  }
  public static boolean ifMacro_Condition_13_5(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), LINKS.orderBy$K96v) != null) && (ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.cols$kMcM)).findFirst((it) -> (SLinkOperations.getTarget(it, LINKS.aggregationFunction$8ryB) != null)) != null);
  }
  public static boolean ifMacro_Condition_14_0(final IfMacroContext _context) {
    SNode script = SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false);
    List<SNode> allQueryConditions = Script__BehaviorDescriptor.findAllSingleTableConditions_id4BxYaol$2qr.invoke(script, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.where$e1s0), LINKS.condition$d94q));

    for (SNode condition : ListSequence.fromList(allQueryConditions)) {
      if (SLinkOperations.getTarget(_context.getNode(), LINKS.tableRef$boeY) == Script__BehaviorDescriptor.getTableFromCondition_id3lH3Hb9hrb6.invoke(script, condition)) {
        return false;
      }
    }

    return true;
  }
  public static boolean ifMacro_Condition_14_1(final IfMacroContext _context) {
    SNode script = SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false);
    List<SNode> allQueryConditions = Script__BehaviorDescriptor.findAllSingleTableConditions_id4BxYaol$2qr.invoke(script, SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false), LINKS.where$e1s0), LINKS.condition$d94q));

    for (SNode condition : ListSequence.fromList(allQueryConditions)) {
      if (SLinkOperations.getTarget(_context.getNode(), LINKS.tableRef$boeY) == Script__BehaviorDescriptor.getTableFromCondition_id3lH3Hb9hrb6.invoke(script, condition)) {
        return true;
      }
    }

    return false;
  }
  public static Object templateArgumentQuery_1_0(final TemplateArgumentContext _context) {
    return SLinkOperations.getTarget(_context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "aggFunctionBehavior"), LINKS.receivedMessage$DtsG);
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> aggregationFunctions = ListSequence.fromList(new ArrayList<SNode>());

    for (SNode select : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(_context.getNode(), LINKS.operations$az69), CONCEPTS.Select$Te))) {
      for (SNode col : ListSequence.fromList(SLinkOperations.getChildren(select, LINKS.cols$kMcM))) {
        if ((SLinkOperations.getTarget(col, LINKS.aggregationFunction$8ryB) != null) && !(ListSequence.fromList(aggregationFunctions).contains(SLinkOperations.getTarget(col, LINKS.aggregationFunction$8ryB)))) {
          ListSequence.fromList(aggregationFunctions).addElement(SLinkOperations.getTarget(col, LINKS.aggregationFunction$8ryB));
        }
      }
    }

    return aggregationFunctions;
  }
  public static Iterable<SNode> sourceNodesQuery_1_1(final SourceSubstituteMacroNodesContext _context) {

    List<SNode> conditions = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> selects = ListSequence.fromList(new ArrayList<SNode>());

    for (SNode selectQuery : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.operations$az69)).where((it) -> SNodeOperations.isInstanceOf(it, CONCEPTS.Select$Te))) {
      {
        final SNode select = selectQuery;
        if (SNodeOperations.isInstanceOf(select, CONCEPTS.Select$Te)) {

          int count = 0;

          if ((SLinkOperations.getTarget(select, LINKS.where$e1s0) != null)) {
            if (ListSequence.fromList(SLinkOperations.getChildren(select, LINKS.tables$IXdn)).count() > 1) {
              // joined tables
              List<SNode> singleTableConditions = Script__BehaviorDescriptor.findAllSingleTableConditions_id4BxYaol$2qr.invoke(_context.getNode(), SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q));
              for (final SNode condition : ListSequence.fromList(singleTableConditions)) {
                if (!(ListSequence.fromList(conditions).any((it) -> new SNodeMatcher().match(it, condition)))) {
                  ListSequence.fromList(conditions).addElement(condition);
                  ListSequence.fromList(selects).addElement(select);
                  count++;
                }
              }
            } else {
              if (!(ListSequence.fromList(conditions).any((it) -> new SNodeMatcher().match(it, SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q))))) {
                ListSequence.fromList(conditions).addElement(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q));
                ListSequence.fromList(selects).addElement(select);
                count++;
              }
            }

          }

          SNode integerConstant = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, "jetbrains.mps.baseLanguage.structure.IntegerConstant"));
          SPropertyOperations.assign(integerConstant, PROPS.value$jgCM, count);
          _context.registerMappingLabel(select, "SelectionActorsNumber", integerConstant);
        }
      }
    }

    for (SNode select : ListSequence.fromList(selects)) {
      for (SNode condition : ListSequence.fromList(conditions)) {
        if (new SNodeMatcher().match(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q), condition)) {
          _context.registerMappingLabel(SLinkOperations.getTarget(SLinkOperations.getTarget(select, LINKS.where$e1s0), LINKS.condition$d94q), "ConditionLabel", condition);
        }
      }
    }

    return selects;
  }
  public static Iterable<SNode> sourceNodesQuery_1_2(final SourceSubstituteMacroNodesContext _context) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(_context.getNode(), LINKS.operations$az69), CONCEPTS.Select$Te);
  }
  public static Iterable<SNode> sourceNodesQuery_1_3(final SourceSubstituteMacroNodesContext _context) {
    return Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(_context.getNode(), LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.tables$IXdn)).count() == 1);
  }
  public static Iterable<SNode> sourceNodesQuery_1_4(final SourceSubstituteMacroNodesContext _context) {
    return Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(_context.getNode(), LINKS.operations$az69), CONCEPTS.Select$Te)).where((it) -> ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.tables$IXdn)).count() > 1);
  }
  public static Iterable<SNode> sourceNodesQuery_1_5(final SourceSubstituteMacroNodesContext _context) {
    return SNodeOperations.ofConcept(SLinkOperations.getChildren(_context.getNode(), LINKS.operations$az69), CONCEPTS.Select$Te);
  }
  public static Iterable<SNode> sourceNodesQuery_2_0(final SourceSubstituteMacroNodesContext _context) {

    /*
      <type> <var>;
      for 
      return

    */


    return (List<SNode>) Script__BehaviorDescriptor.findAllSingleTableConditions_id4BxYaol$2qr.invoke(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q));

  }
  public static Iterable<SNode> sourceNodesQuery_11_0(final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) Script__BehaviorDescriptor.findAllSingleTableConditions_id4BxYaol$2qr.invoke(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q));
  }
  public static Iterable<SNode> sourceNodesQuery_13_0(final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) Script__BehaviorDescriptor.findAllSingleTableConditions_id4BxYaol$2qr.invoke(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Script$Rg, false, false), SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q));
  }
  public static Iterable<SNode> sourceNodesQuery_14_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn);
  }
  public static Iterable<SNode> sourceNodesQuery_14_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), LINKS.tables$IXdn);
  }
  public static void mappingScript_CodeBlock_7(final MappingScriptContext _context) {
    for (SNode simpleCondition : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.SimpleCondition$89))) {
      SPropertyOperations.assign(simpleCondition, PROPS.textualCondition$n5ly, SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(simpleCondition, LINKS.column$Aee5), LINKS.column$Wyeu), PROPS.name$MnvL) + " " + SPropertyOperations.getEnum(simpleCondition, PROPS.operator$A7DD) + " " + SPropertyOperations.getString(SLinkOperations.getTarget(simpleCondition, LINKS.value$Ad30), PROPS.value$RF4w));
    }
    for (SNode multipleCondition : ListSequence.fromList(SModelOperations.nodes(_context.getModel(), CONCEPTS.MultipleCondition$9A))) {
      MultipleCondition__BehaviorDescriptor.setMultipleConditionString_id6w4sAgfAEwn.invoke(multipleCondition);
    }
  }
  public static SNode labelMapNode2_0(final TemplateQueryContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.where$e1s0), LINKS.condition$d94q);
  }
  public static SNode labelMapNode2_1(final TemplateQueryContext _context) {
    return SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Select$Te, false, false);
  }
  private final Map<String, ReductionRuleCondition> rrcMethods = new HashMap<String, ReductionRuleCondition>();
  {
    int i = 0;
    rrcMethods.put("2942082050237362634", new RRC(i++));
    rrcMethods.put("2942082050237375201", new RRC(i++));
    rrcMethods.put("2942082050237386837", new RRC(i++));
    rrcMethods.put("2942082050237394085", new RRC(i++));
    rrcMethods.put("2942082050237401426", new RRC(i++));
    rrcMethods.put("2942082050239461039", new RRC(i++));
    rrcMethods.put("2942082050239505169", new RRC(i++));
    rrcMethods.put("2942082050239506902", new RRC(i++));
    rrcMethods.put("2942082050239508357", new RRC(i++));
    rrcMethods.put("2942082050240019032", new RRC(i++));
    rrcMethods.put("2942082050240007348", new RRC(i++));
    rrcMethods.put("2942082050240020842", new RRC(i++));
    rrcMethods.put("2942082050240030500", new RRC(i++));
    rrcMethods.put("2942082050240042478", new RRC(i++));
    rrcMethods.put("8619478032122580195", new RRC(i++));
    rrcMethods.put("1404468460816780587", new RRC(i++));
    rrcMethods.put("1404468460816789191", new RRC(i++));
    rrcMethods.put("1404468460816839082", new RRC(i++));
    rrcMethods.put("1404468460816843650", new RRC(i++));
    rrcMethods.put("1404468460816845979", new RRC(i++));
    rrcMethods.put("622446679693505961", new RRC(i++));
    rrcMethods.put("4614575099525927197", new RRC(i++));
  }
  @Override
  @NotNull
  public ReductionRuleCondition getReductionRuleCondition(@NotNull QueryKey identity) {
    ReductionRuleCondition query = identity.forTemplateNode(rrcMethods);
    return (query != null ? query : super.getReductionRuleCondition(identity));
  }
  private static class RRC implements ReductionRuleCondition {
    private final int methodKey;
    public RRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(ReductionRuleQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_6_0(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_6_1(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_6_2(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_6_3(ctx);
        case 4:
          return QueriesGenerated.rule_Condition_6_4(ctx);
        case 5:
          return QueriesGenerated.rule_Condition_8_0(ctx);
        case 6:
          return QueriesGenerated.rule_Condition_8_1(ctx);
        case 7:
          return QueriesGenerated.rule_Condition_8_2(ctx);
        case 8:
          return QueriesGenerated.rule_Condition_8_3(ctx);
        case 9:
          return QueriesGenerated.rule_Condition_9_0(ctx);
        case 10:
          return QueriesGenerated.rule_Condition_9_1(ctx);
        case 11:
          return QueriesGenerated.rule_Condition_9_2(ctx);
        case 12:
          return QueriesGenerated.rule_Condition_10_0(ctx);
        case 13:
          return QueriesGenerated.rule_Condition_10_1(ctx);
        case 14:
          return QueriesGenerated.rule_Condition_11_0(ctx);
        case 15:
          return QueriesGenerated.rule_Condition_11_1(ctx);
        case 16:
          return QueriesGenerated.rule_Condition_12_0(ctx);
        case 17:
          return QueriesGenerated.rule_Condition_12_1(ctx);
        case 18:
          return QueriesGenerated.rule_Condition_12_2(ctx);
        case 19:
          return QueriesGenerated.rule_Condition_12_3(ctx);
        case 20:
          return QueriesGenerated.rule_Condition_14_0(ctx);
        case 21:
          return QueriesGenerated.rule_Condition_14_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("1455449051929537877", new SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    ScriptCodeBlock query = identity.forTemplateNode(mscbMethods);
    return (query != null ? query : super.getScriptCodeBlock(identity));
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_7(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("6555699270750122466", new SNsQ(i++));
    snsqMethods.put("7824142728414925415", new SNsQ(i++));
    snsqMethods.put("2171626095253891828", new SNsQ(i++));
    snsqMethods.put("1455449051933219683", new SNsQ(i++));
    snsqMethods.put("1404468460817576280", new SNsQ(i++));
    snsqMethods.put("3849749554957269401", new SNsQ(i++));
    snsqMethods.put("3336533897854432983", new SNsQ(i++));
    snsqMethods.put("8619478032122605395", new SNsQ(i++));
    snsqMethods.put("622446679667223601", new SNsQ(i++));
    snsqMethods.put("622446679693549378", new SNsQ(i++));
    snsqMethods.put("4614575099526000285", new SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    SourceNodesQuery query = identity.forFunctionNode(snsqMethods);
    return (query != null ? query : super.getSourceNodesQuery(identity));
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_1(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_2(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_3(ctx));
        case 4:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_4(ctx));
        case 5:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_5(ctx));
        case 6:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_2_0(ctx));
        case 7:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_11_0(ctx));
        case 8:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_13_0(ctx));
        case 9:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_14_0(ctx));
        case 10:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_14_1(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("6555699270750294591", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "aggOp"));
    pvqMethods.put("7824142728414950044", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "select"));
    pvqMethods.put("2171626095255441299", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "Script"));
    pvqMethods.put("7824142728411256451", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "proj"));
    pvqMethods.put("622446679681395785", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "join"));
    pvqMethods.put("2171626095253807980", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "groupBy"));
    pvqMethods.put("2171626095253830066", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "orderBy"));
    pvqMethods.put("2171626095253857269", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "aggFunction"));
    pvqMethods.put("7495241453935559443", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032122744574", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032122821270", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123152207", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123164127", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123325317", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123339737", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123352136", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123360621", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123292114", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123306969", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123303864", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123266771", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032123273468", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032122627480", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032122674642", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032126684434", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032126696505", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032126724264", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032126735903", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032127837221", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "body"));
    pvqMethods.put("7495241453934133655", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
    pvqMethods.put("8619478032126559495", new PVQ(i++, MetaAdapterFactory.getProperty(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x3db738e392e4ce51L, 0x3db738e392e4ce52L, "body"), "data"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    PropertyValueQuery query = identity.forTemplateNode(pvqMethods);
    return (query != null ? query : super.getPropertyValueQuery(identity));
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_1_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_1_2(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_4_0(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_4_1(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_4_2(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_4_3(ctx);
        case 7:
          return QueriesGenerated.propertyMacro_GetValue_4_4(ctx);
        case 8:
          return QueriesGenerated.propertyMacro_GetValue_6_0(ctx);
        case 9:
          return QueriesGenerated.propertyMacro_GetValue_6_1(ctx);
        case 10:
          return QueriesGenerated.propertyMacro_GetValue_6_2(ctx);
        case 11:
          return QueriesGenerated.propertyMacro_GetValue_6_3(ctx);
        case 12:
          return QueriesGenerated.propertyMacro_GetValue_6_4(ctx);
        case 13:
          return QueriesGenerated.propertyMacro_GetValue_8_0(ctx);
        case 14:
          return QueriesGenerated.propertyMacro_GetValue_8_1(ctx);
        case 15:
          return QueriesGenerated.propertyMacro_GetValue_8_2(ctx);
        case 16:
          return QueriesGenerated.propertyMacro_GetValue_8_3(ctx);
        case 17:
          return QueriesGenerated.propertyMacro_GetValue_9_0(ctx);
        case 18:
          return QueriesGenerated.propertyMacro_GetValue_9_1(ctx);
        case 19:
          return QueriesGenerated.propertyMacro_GetValue_9_2(ctx);
        case 20:
          return QueriesGenerated.propertyMacro_GetValue_10_0(ctx);
        case 21:
          return QueriesGenerated.propertyMacro_GetValue_10_1(ctx);
        case 22:
          return QueriesGenerated.propertyMacro_GetValue_11_0(ctx);
        case 23:
          return QueriesGenerated.propertyMacro_GetValue_11_1(ctx);
        case 24:
          return QueriesGenerated.propertyMacro_GetValue_12_0(ctx);
        case 25:
          return QueriesGenerated.propertyMacro_GetValue_12_1(ctx);
        case 26:
          return QueriesGenerated.propertyMacro_GetValue_12_2(ctx);
        case 27:
          return QueriesGenerated.propertyMacro_GetValue_12_3(ctx);
        case 28:
          return QueriesGenerated.propertyMacro_GetValue_13_0(ctx);
        case 29:
          return QueriesGenerated.propertyMacro_GetValue_13_1(ctx);
        case 30:
          return QueriesGenerated.propertyMacro_GetValue_14_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, IfMacroCondition> imcMethods = new HashMap<String, IfMacroCondition>();
  {
    int i = 0;
    imcMethods.put("6555699270749813237", new IfMC(i++));
    imcMethods.put("6555699270750084676", new IfMC(i++));
    imcMethods.put("7724742800290591583", new IfMC(i++));
    imcMethods.put("3336533897854433056", new IfMC(i++));
    imcMethods.put("7724742800288446836", new IfMC(i++));
    imcMethods.put("7724742800288500071", new IfMC(i++));
    imcMethods.put("7724742800288515014", new IfMC(i++));
    imcMethods.put("7724742800288519799", new IfMC(i++));
    imcMethods.put("7724742800288521988", new IfMC(i++));
    imcMethods.put("7824142728411261213", new IfMC(i++));
    imcMethods.put("622446679681352768", new IfMC(i++));
    imcMethods.put("2171626095253807971", new IfMC(i++));
    imcMethods.put("2171626095253830057", new IfMC(i++));
    imcMethods.put("2171626095253857260", new IfMC(i++));
    imcMethods.put("2942082050240078069", new IfMC(i++));
    imcMethods.put("2942082050240079464", new IfMC(i++));
    imcMethods.put("2942082050240118698", new IfMC(i++));
    imcMethods.put("2942082050240047343", new IfMC(i++));
    imcMethods.put("2942082050237369764", new IfMC(i++));
    imcMethods.put("622446679675937640", new IfMC(i++));
    imcMethods.put("4614575099524806781", new IfMC(i++));
    imcMethods.put("622446679667224271", new IfMC(i++));
    imcMethods.put("1404468460818266218", new IfMC(i++));
    imcMethods.put("1404468460818270270", new IfMC(i++));
    imcMethods.put("1404468460818272041", new IfMC(i++));
    imcMethods.put("4614575099526004739", new IfMC(i++));
    imcMethods.put("4614575099526595199", new IfMC(i++));
  }
  @NotNull
  @Override
  public IfMacroCondition getIfMacroCondition(@NotNull QueryKey identity) {
    IfMacroCondition query = identity.forTemplateNode(imcMethods);
    return (query != null ? query : super.getIfMacroCondition(identity));
  }
  private static class IfMC implements IfMacroCondition {
    private final int methodKey;
    public IfMC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull IfMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.ifMacro_Condition_1_0(ctx);
        case 1:
          return QueriesGenerated.ifMacro_Condition_1_1(ctx);
        case 2:
          return QueriesGenerated.ifMacro_Condition_2_0(ctx);
        case 3:
          return QueriesGenerated.ifMacro_Condition_2_1(ctx);
        case 4:
          return QueriesGenerated.ifMacro_Condition_2_2(ctx);
        case 5:
          return QueriesGenerated.ifMacro_Condition_2_3(ctx);
        case 6:
          return QueriesGenerated.ifMacro_Condition_2_4(ctx);
        case 7:
          return QueriesGenerated.ifMacro_Condition_2_5(ctx);
        case 8:
          return QueriesGenerated.ifMacro_Condition_2_6(ctx);
        case 9:
          return QueriesGenerated.ifMacro_Condition_4_0(ctx);
        case 10:
          return QueriesGenerated.ifMacro_Condition_4_1(ctx);
        case 11:
          return QueriesGenerated.ifMacro_Condition_4_2(ctx);
        case 12:
          return QueriesGenerated.ifMacro_Condition_4_3(ctx);
        case 13:
          return QueriesGenerated.ifMacro_Condition_4_4(ctx);
        case 14:
          return QueriesGenerated.ifMacro_Condition_5_0(ctx);
        case 15:
          return QueriesGenerated.ifMacro_Condition_5_1(ctx);
        case 16:
          return QueriesGenerated.ifMacro_Condition_5_2(ctx);
        case 17:
          return QueriesGenerated.ifMacro_Condition_5_3(ctx);
        case 18:
          return QueriesGenerated.ifMacro_Condition_6_0(ctx);
        case 19:
          return QueriesGenerated.ifMacro_Condition_13_0(ctx);
        case 20:
          return QueriesGenerated.ifMacro_Condition_13_1(ctx);
        case 21:
          return QueriesGenerated.ifMacro_Condition_13_2(ctx);
        case 22:
          return QueriesGenerated.ifMacro_Condition_13_3(ctx);
        case 23:
          return QueriesGenerated.ifMacro_Condition_13_4(ctx);
        case 24:
          return QueriesGenerated.ifMacro_Condition_13_5(ctx);
        case 25:
          return QueriesGenerated.ifMacro_Condition_14_0(ctx);
        case 26:
          return QueriesGenerated.ifMacro_Condition_14_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for if macro %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, ReferenceTargetQuery> rtqMethods = new HashMap<String, ReferenceTargetQuery>();
  {
    rtqMethods.put("7724742800290638489", new RTQ(0, "aggFunction"));
    rtqMethods.put("3336533897854501295", new RTQ(1, "dataSource"));
    rtqMethods.put("7724742800288490914", new RTQ(2, "aggFunction"));
    rtqMethods.put("7724742800288514317", new RTQ(3, "aggFunction"));
    rtqMethods.put("7724742800288515025", new RTQ(4, "aggFunction"));
    rtqMethods.put("7724742800288519810", new RTQ(5, "aggFunction"));
    rtqMethods.put("7724742800288521999", new RTQ(6, "aggFunction"));
    rtqMethods.put("7724742800300090481", new RTQ(7, "dataSource"));
    rtqMethods.put("2171626095253857286", new RTQ(8, "aggOp"));
    rtqMethods.put("2942082050240056169", new RTQ(9, ""));
    rtqMethods.put("2942082050240059554", new RTQ(10, ""));
    rtqMethods.put("2942082050237369037", new RTQ(11, ""));
    rtqMethods.put("622446679693263575", new RTQ(12, ""));
    rtqMethods.put("2942082050237382372", new RTQ(13, ""));
    rtqMethods.put("622446679693465858", new RTQ(14, ""));
    rtqMethods.put("2942082050237389816", new RTQ(15, ""));
    rtqMethods.put("622446679693471349", new RTQ(16, ""));
    rtqMethods.put("2942082050237397072", new RTQ(17, ""));
    rtqMethods.put("622446679693477433", new RTQ(18, ""));
    rtqMethods.put("2942082050237408208", new RTQ(19, ""));
    rtqMethods.put("622446679693483010", new RTQ(20, ""));
    rtqMethods.put("2942082050239499213", new RTQ(21, ""));
    rtqMethods.put("2942082050239504451", new RTQ(22, ""));
    rtqMethods.put("2942082050239505185", new RTQ(23, ""));
    rtqMethods.put("2942082050239505197", new RTQ(24, ""));
    rtqMethods.put("2942082050239506918", new RTQ(25, ""));
    rtqMethods.put("2942082050239506930", new RTQ(26, ""));
    rtqMethods.put("2942082050239508373", new RTQ(27, ""));
    rtqMethods.put("2942082050239508385", new RTQ(28, ""));
    rtqMethods.put("2942082050240019035", new RTQ(29, ""));
    rtqMethods.put("2942082050240019043", new RTQ(30, ""));
    rtqMethods.put("2942082050240015291", new RTQ(31, ""));
    rtqMethods.put("2942082050240018178", new RTQ(32, ""));
    rtqMethods.put("2942082050240020845", new RTQ(33, ""));
    rtqMethods.put("2942082050240020853", new RTQ(34, ""));
    rtqMethods.put("2942082050240039348", new RTQ(35, ""));
    rtqMethods.put("2942082050240041223", new RTQ(36, ""));
    rtqMethods.put("2942082050240042481", new RTQ(37, ""));
    rtqMethods.put("2942082050240042489", new RTQ(38, ""));
    rtqMethods.put("8619478032122607165", new RTQ(39, ""));
    rtqMethods.put("622446679664943984", new RTQ(40, ""));
    rtqMethods.put("1404468460816835150", new RTQ(41, ""));
    rtqMethods.put("1404468460816837025", new RTQ(42, ""));
    rtqMethods.put("1404468460816839085", new RTQ(43, ""));
    rtqMethods.put("1404468460816839093", new RTQ(44, ""));
    rtqMethods.put("1404468460816843653", new RTQ(45, ""));
    rtqMethods.put("1404468460816843661", new RTQ(46, ""));
    rtqMethods.put("1404468460816845982", new RTQ(47, ""));
    rtqMethods.put("1404468460816845990", new RTQ(48, ""));
    rtqMethods.put("622446679667247214", new RTQ(49, ""));
    rtqMethods.put("622446679667275417", new RTQ(50, ""));
    rtqMethods.put("1404468460818272025", new RTQ(51, ""));
    rtqMethods.put("1404468460818272033", new RTQ(52, ""));
    rtqMethods.put("622446679693546648", new RTQ(53, ""));
    rtqMethods.put("4614575099524729705", new RTQ(54, ""));
    rtqMethods.put("4614575099526357896", new RTQ(55, ""));
    rtqMethods.put("4614575099526387678", new RTQ(56, ""));
    rtqMethods.put("4614575099526489069", new RTQ(57, ""));
    rtqMethods.put("4614575099526494714", new RTQ(58, ""));
    rtqMethods.put("4614575099526568366", new RTQ(59, ""));
    rtqMethods.put("4614575099526580588", new RTQ(60, ""));
    rtqMethods.put("4614575099530246914", new RTQ(61, null));
    rtqMethods.put("4614575099530247920", new RTQ(62, null));
    rtqMethods.put("4614575099530248522", new RTQ(63, null));
    rtqMethods.put("4614575099530248608", new RTQ(64, null));
    rtqMethods.put("4614575099530248976", new RTQ(65, null));
  }
  @NotNull
  @Override
  public ReferenceTargetQuery getReferenceTargetQuery(@NotNull QueryKey queryKey) {
    ReferenceTargetQuery query = queryKey.forTemplateNode(rtqMethods);
    return (query != null ? query : super.getReferenceTargetQuery(queryKey));
  }
  private static class RTQ extends ReferenceTargetQuery.Base {
    private final int methodKey;
    /*package*/ RTQ(int methodKey, String templateValue) {
      super(templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull ReferenceMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.referenceMacro_GetReferent_2_0(ctx);
        case 1:
          return QueriesGenerated.referenceMacro_GetReferent_2_1(ctx);
        case 2:
          return QueriesGenerated.referenceMacro_GetReferent_2_2(ctx);
        case 3:
          return QueriesGenerated.referenceMacro_GetReferent_2_3(ctx);
        case 4:
          return QueriesGenerated.referenceMacro_GetReferent_2_4(ctx);
        case 5:
          return QueriesGenerated.referenceMacro_GetReferent_2_5(ctx);
        case 6:
          return QueriesGenerated.referenceMacro_GetReferent_2_6(ctx);
        case 7:
          return QueriesGenerated.referenceMacro_GetReferent_3_0(ctx);
        case 8:
          return QueriesGenerated.referenceMacro_GetReferent_4_0(ctx);
        case 9:
          return QueriesGenerated.referenceMacro_GetReferent_5_0(ctx);
        case 10:
          return QueriesGenerated.referenceMacro_GetReferent_5_1(ctx);
        case 11:
          return QueriesGenerated.referenceMacro_GetReferent_6_0(ctx);
        case 12:
          return QueriesGenerated.referenceMacro_GetReferent_6_1(ctx);
        case 13:
          return QueriesGenerated.referenceMacro_GetReferent_6_2(ctx);
        case 14:
          return QueriesGenerated.referenceMacro_GetReferent_6_3(ctx);
        case 15:
          return QueriesGenerated.referenceMacro_GetReferent_6_4(ctx);
        case 16:
          return QueriesGenerated.referenceMacro_GetReferent_6_5(ctx);
        case 17:
          return QueriesGenerated.referenceMacro_GetReferent_6_6(ctx);
        case 18:
          return QueriesGenerated.referenceMacro_GetReferent_6_7(ctx);
        case 19:
          return QueriesGenerated.referenceMacro_GetReferent_6_8(ctx);
        case 20:
          return QueriesGenerated.referenceMacro_GetReferent_6_9(ctx);
        case 21:
          return QueriesGenerated.referenceMacro_GetReferent_8_0(ctx);
        case 22:
          return QueriesGenerated.referenceMacro_GetReferent_8_1(ctx);
        case 23:
          return QueriesGenerated.referenceMacro_GetReferent_8_2(ctx);
        case 24:
          return QueriesGenerated.referenceMacro_GetReferent_8_3(ctx);
        case 25:
          return QueriesGenerated.referenceMacro_GetReferent_8_4(ctx);
        case 26:
          return QueriesGenerated.referenceMacro_GetReferent_8_5(ctx);
        case 27:
          return QueriesGenerated.referenceMacro_GetReferent_8_6(ctx);
        case 28:
          return QueriesGenerated.referenceMacro_GetReferent_8_7(ctx);
        case 29:
          return QueriesGenerated.referenceMacro_GetReferent_9_0(ctx);
        case 30:
          return QueriesGenerated.referenceMacro_GetReferent_9_1(ctx);
        case 31:
          return QueriesGenerated.referenceMacro_GetReferent_9_2(ctx);
        case 32:
          return QueriesGenerated.referenceMacro_GetReferent_9_3(ctx);
        case 33:
          return QueriesGenerated.referenceMacro_GetReferent_9_4(ctx);
        case 34:
          return QueriesGenerated.referenceMacro_GetReferent_9_5(ctx);
        case 35:
          return QueriesGenerated.referenceMacro_GetReferent_10_0(ctx);
        case 36:
          return QueriesGenerated.referenceMacro_GetReferent_10_1(ctx);
        case 37:
          return QueriesGenerated.referenceMacro_GetReferent_10_2(ctx);
        case 38:
          return QueriesGenerated.referenceMacro_GetReferent_10_3(ctx);
        case 39:
          return QueriesGenerated.referenceMacro_GetReferent_11_0(ctx);
        case 40:
          return QueriesGenerated.referenceMacro_GetReferent_11_1(ctx);
        case 41:
          return QueriesGenerated.referenceMacro_GetReferent_12_0(ctx);
        case 42:
          return QueriesGenerated.referenceMacro_GetReferent_12_1(ctx);
        case 43:
          return QueriesGenerated.referenceMacro_GetReferent_12_2(ctx);
        case 44:
          return QueriesGenerated.referenceMacro_GetReferent_12_3(ctx);
        case 45:
          return QueriesGenerated.referenceMacro_GetReferent_12_4(ctx);
        case 46:
          return QueriesGenerated.referenceMacro_GetReferent_12_5(ctx);
        case 47:
          return QueriesGenerated.referenceMacro_GetReferent_12_6(ctx);
        case 48:
          return QueriesGenerated.referenceMacro_GetReferent_12_7(ctx);
        case 49:
          return QueriesGenerated.referenceMacro_GetReferent_13_0(ctx);
        case 50:
          return QueriesGenerated.referenceMacro_GetReferent_13_1(ctx);
        case 51:
          return QueriesGenerated.referenceMacro_GetReferent_13_2(ctx);
        case 52:
          return QueriesGenerated.referenceMacro_GetReferent_13_3(ctx);
        case 53:
          return QueriesGenerated.referenceMacro_GetReferent_14_0(ctx);
        case 54:
          return QueriesGenerated.referenceMacro_GetReferent_14_1(ctx);
        case 55:
          return QueriesGenerated.referenceMacro_GetReferent_14_2(ctx);
        case 56:
          return QueriesGenerated.referenceMacro_GetReferent_14_3(ctx);
        case 57:
          return QueriesGenerated.referenceMacro_GetReferent_15_0(ctx);
        case 58:
          return QueriesGenerated.referenceMacro_GetReferent_15_1(ctx);
        case 59:
          return QueriesGenerated.referenceMacro_GetReferent_15_2(ctx);
        case 60:
          return QueriesGenerated.referenceMacro_GetReferent_15_3(ctx);
        case 61:
          return QueriesGenerated.referenceMacro_GetReferent_16_0(ctx);
        case 62:
          return QueriesGenerated.referenceMacro_GetReferent_16_1(ctx);
        case 63:
          return QueriesGenerated.referenceMacro_GetReferent_16_2(ctx);
        case 64:
          return QueriesGenerated.referenceMacro_GetReferent_16_3(ctx);
        case 65:
          return QueriesGenerated.referenceMacro_GetReferent_16_4(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, CallArgumentQuery> caqMethods = new HashMap<String, CallArgumentQuery>();
  {
    caqMethods.put("4614575099527601553", new CAQ(0));
  }
  @NotNull
  @Override
  public CallArgumentQuery getTemplateCallArgumentQuery(@NotNull QueryKey queryKey) {
    CallArgumentQuery query = queryKey.forTemplateNode(caqMethods);
    return (query != null ? query : super.getTemplateCallArgumentQuery(queryKey));
  }
  private static class CAQ implements CallArgumentQuery {
    private final int methodKey;
    /*package*/ CAQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull TemplateArgumentContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.templateArgumentQuery_1_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private Map<String, LabelInputQuery> liqMethods = new HashMap<String, LabelInputQuery>();
  {
    liqMethods.put("1455449051929880375", new LIQ(0));
    liqMethods.put("622446679671277492", new LIQ(1));
  }
  @NotNull
  @Override
  public LabelInputQuery getLabelInputQuery(@NotNull QueryKey key) {
    LabelInputQuery query = key.forFunctionNode(liqMethods);
    return (query != null ? query : super.getLabelInputQuery(key));
  }
  private static class LIQ implements LabelInputQuery {
    private final int methodKey;
    private LIQ(int key) {
      methodKey = key;
    }
    @Nullable
    @Override
    public Object evaluate(@NotNull LabelKeyQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.labelMapNode2_0(ctx);
        case 1:
          return QueriesGenerated.labelMapNode2_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink where$e1s0 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0x11100ee73745172dL, "where");
    /*package*/ static final SContainmentLink condition$d94q = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e37bL, 0x11100ee7374a23b4L, "condition");
    /*package*/ static final SContainmentLink cols$kMcM = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0xe8aecd6b255930cL, "cols");
    /*package*/ static final SContainmentLink groupBy$vhgB = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0x2b087ec3aa6a1779L, "groupBy");
    /*package*/ static final SContainmentLink orderBy$K96v = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0x2b087ec3aa61e429L, "orderBy");
    /*package*/ static final SContainmentLink aggregationFunction$8ryB = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0xe8aecd6b2519712L, 0xb59df187aaa4b3dL, "aggregationFunction");
    /*package*/ static final SReferenceLink column$Wyeu = MetaAdapterFactory.getReferenceLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee7375157f4L, 0x11100ee7375157f5L, "column");
    /*package*/ static final SContainmentLink columns$JBv$ = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x2b087ec3aa6a16ceL, 0x2b087ec3aa6a1759L, "columns");
    /*package*/ static final SContainmentLink columns$Hhkv = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x2b087ec3aa61e251L, 0x2b087ec3aa6a16cfL, "columns");
    /*package*/ static final SContainmentLink tables$IXdn = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0x207f13a8b54616bfL, "tables");
    /*package*/ static final SContainmentLink joinCondition$rc3m = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0x6c94f05b7ec9d072L, "joinCondition");
    /*package*/ static final SContainmentLink leftColumn$NKe0 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x6c94f05b7ec9d046L, 0x6c94f05b7ec9d049L, "leftColumn");
    /*package*/ static final SContainmentLink rightColumn$NKG2 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x6c94f05b7ec9d046L, 0x6c94f05b7ec9d04bL, "rightColumn");
    /*package*/ static final SContainmentLink column$Aee5 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea18L, 0x5eeb1b6c0699ea2bL, "column");
    /*package*/ static final SContainmentLink conditionDx$A_03 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, 0x5eeb1b6c0699ea4dL, "conditionDx");
    /*package*/ static final SReferenceLink tableRef$boeY = MetaAdapterFactory.getReferenceLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x207f13a8b545f6deL, 0x207f13a8b545f6dfL, "tableRef");
    /*package*/ static final SContainmentLink aggregateFunction$GMhu = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0x5d7e70837b028396L, "aggregateFunction");
    /*package*/ static final SContainmentLink operations$az69 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443bcdL, 0x2b087ec3aa655166L, "operations");
    /*package*/ static final SContainmentLink receivedMessage$DtsG = MetaAdapterFactory.getContainmentLink(0x10eda99958984cdeL, 0x9416196c5eca1268L, 0x2176abe5743ae753L, 0x5ef413f8f5ff2c54L, "receivedMessage");
    /*package*/ static final SContainmentLink value$Ad30 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea18L, 0x5eeb1b6c0699ea26L, "value");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept AllColumns$eP = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0xe8aecd6b2519713L, "QueryLanguage.structure.AllColumns");
    /*package*/ static final SConcept ColumnRef$XM = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee7375157f4L, "QueryLanguage.structure.ColumnRef");
    /*package*/ static final SConcept SimpleCondition$89 = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea18L, "QueryLanguage.structure.SimpleCondition");
    /*package*/ static final SConcept CreateTable$ca = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b2eL, "QueryLanguage.structure.CreateTable");
    /*package*/ static final SConcept MultipleCondition$9A = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, "QueryLanguage.structure.MultipleCondition");
    /*package*/ static final SConcept Select$Te = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, "QueryLanguage.structure.Select");
    /*package*/ static final SConcept Script$Rg = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443bcdL, "QueryLanguage.structure.Script");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty textualCondition$n5ly = MetaAdapterFactory.getProperty(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea17L, 0x680472640f9c3430L, "textualCondition");
    /*package*/ static final SProperty fullName$t1KL = MetaAdapterFactory.getProperty(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b33L, 0x207f13a8b5691efbL, "fullName");
    /*package*/ static final SProperty value$jgCM = MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value");
    /*package*/ static final SProperty value$RF4w = MetaAdapterFactory.getProperty(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x625a3ba00f1cc88bL, 0x625a3ba00f1cc88eL, "value");
    /*package*/ static final SProperty operator$A7DD = MetaAdapterFactory.getProperty(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea18L, 0x5eeb1b6c0699ea24L, "operator");
  }
}
