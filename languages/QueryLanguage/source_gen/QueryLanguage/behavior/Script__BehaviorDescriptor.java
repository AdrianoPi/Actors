package QueryLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.SNodeMatcher;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public final class Script__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443bcdL, "QueryLanguage.structure.Script");

  public static final SMethod<List<SNode>> findAllSingleTableConditions_id4BxYaol$2qr = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("findAllSingleTableConditions").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(5323809626738665115L).languageId(0xb522c0cdd699ded3L, 0x26d1395b1ee643adL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<Void> findAllSingleTableConditionsRecursive_id4BxYaol$2vv = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("findAllSingleTableConditionsRecursive").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(5323809626738665439L).languageId(0xb522c0cdd699ded3L, 0x26d1395b1ee643adL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<Boolean> isConditionOnSingleTable_id3lH3Hb9hoXq = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("isConditionOnSingleTable").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(3849749554954342234L).languageId(0xb522c0cdd699ded3L, 0x26d1395b1ee643adL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<SNode> getTableFromCondition_id3lH3Hb9hrb6 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getTableFromCondition").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(3849749554954351302L).languageId(0xb522c0cdd699ded3L, 0x26d1395b1ee643adL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(findAllSingleTableConditions_id4BxYaol$2qr, findAllSingleTableConditionsRecursive_id4BxYaol$2vv, isConditionOnSingleTable_id3lH3Hb9hoXq, getTableFromCondition_id3lH3Hb9hrb6);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static List<SNode> findAllSingleTableConditions_id4BxYaol$2qr(@NotNull SNode __thisNode__, SNode condition) {
    List<SNode> conditions = ListSequence.fromList(new ArrayList<SNode>());
    Script__BehaviorDescriptor.findAllSingleTableConditionsRecursive_id4BxYaol$2vv.invokeSpecial(__thisNode__, condition, conditions);
    return conditions;
  }
  /*package*/ static void findAllSingleTableConditionsRecursive_id4BxYaol$2vv(@NotNull SNode __thisNode__, SNode condition, List<SNode> conditions) {
    {
      final SNode c = condition;
      if (SNodeOperations.isInstanceOf(c, CONCEPTS.SimpleCondition$89)) {
        ListSequence.fromList(conditions).addElement(c);
        return;
      }
    }
    {
      final SNode multipleCondition = condition;
      if (SNodeOperations.isInstanceOf(multipleCondition, CONCEPTS.MultipleCondition$9A)) {
        if (((boolean) Script__BehaviorDescriptor.isConditionOnSingleTable_id3lH3Hb9hoXq.invokeSpecial(__thisNode__, multipleCondition, Script__BehaviorDescriptor.getTableFromCondition_id3lH3Hb9hrb6.invoke(__thisNode__, multipleCondition)))) {
          ListSequence.fromList(conditions).addElement(multipleCondition);
        } else {
          Script__BehaviorDescriptor.findAllSingleTableConditionsRecursive_id4BxYaol$2vv.invokeSpecial(__thisNode__, SLinkOperations.getTarget(multipleCondition, LINKS.conditionDx$A_03), conditions);
          Script__BehaviorDescriptor.findAllSingleTableConditionsRecursive_id4BxYaol$2vv.invokeSpecial(__thisNode__, SLinkOperations.getTarget(multipleCondition, LINKS.conditionSx$ALET), conditions);
        }
      }
    }
  }
  /*package*/ static boolean isConditionOnSingleTable_id3lH3Hb9hoXq(@NotNull SNode __thisNode__, SNode condition, SNode table) {
    {
      final SNode c = condition;
      if (SNodeOperations.isInstanceOf(c, CONCEPTS.SimpleCondition$89)) {
        return new SNodeMatcher().match(SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(SLinkOperations.getTarget(c, LINKS.column$Aee5), LINKS.column$Wyeu), CONCEPTS.CreateTable$ca, false, false), table);
      }
    }
    {
      final SNode c = condition;
      if (SNodeOperations.isInstanceOf(c, CONCEPTS.MultipleCondition$9A)) {
        return ((boolean) Script__BehaviorDescriptor.isConditionOnSingleTable_id3lH3Hb9hoXq.invokeSpecial(__thisNode__, SLinkOperations.getTarget(c, LINKS.conditionDx$A_03), table)) && ((boolean) Script__BehaviorDescriptor.isConditionOnSingleTable_id3lH3Hb9hoXq.invokeSpecial(__thisNode__, SLinkOperations.getTarget(c, LINKS.conditionSx$ALET), table));
      }
    }

    return false;
  }
  /*package*/ static SNode getTableFromCondition_id3lH3Hb9hrb6(@NotNull SNode __thisNode__, SNode condition) {
    {
      final SNode c = condition;
      if (SNodeOperations.isInstanceOf(c, CONCEPTS.SimpleCondition$89)) {
        return SNodeOperations.getNodeAncestor(SLinkOperations.getTarget(SLinkOperations.getTarget(c, LINKS.column$Aee5), LINKS.column$Wyeu), CONCEPTS.CreateTable$ca, false, false);
      }
    }
    {
      final SNode c = condition;
      if (SNodeOperations.isInstanceOf(c, CONCEPTS.MultipleCondition$9A)) {
        return Script__BehaviorDescriptor.getTableFromCondition_id3lH3Hb9hrb6.invoke(__thisNode__, SLinkOperations.getTarget(c, LINKS.conditionDx$A_03));
      }
    }

    return null;
  }

  /*package*/ Script__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((List<SNode>) findAllSingleTableConditions_id4BxYaol$2qr(node, (SNode) parameters[0]));
      case 1:
        findAllSingleTableConditionsRecursive_id4BxYaol$2vv(node, (SNode) parameters[0], (List<SNode>) parameters[1]);
        return null;
      case 2:
        return (T) ((Boolean) isConditionOnSingleTable_id3lH3Hb9hoXq(node, (SNode) parameters[0], (SNode) parameters[1]));
      case 3:
        return (T) ((SNode) getTableFromCondition_id3lH3Hb9hrb6(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SimpleCondition$89 = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea18L, "QueryLanguage.structure.SimpleCondition");
    /*package*/ static final SConcept MultipleCondition$9A = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, "QueryLanguage.structure.MultipleCondition");
    /*package*/ static final SConcept CreateTable$ca = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b2eL, "QueryLanguage.structure.CreateTable");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink conditionDx$A_03 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, 0x5eeb1b6c0699ea4dL, "conditionDx");
    /*package*/ static final SContainmentLink conditionSx$ALET = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, 0x5eeb1b6c0699ea59L, "conditionSx");
    /*package*/ static final SContainmentLink column$Aee5 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea18L, 0x5eeb1b6c0699ea2bL, "column");
    /*package*/ static final SReferenceLink column$Wyeu = MetaAdapterFactory.getReferenceLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee7375157f4L, 0x11100ee7375157f5L, "column");
  }
}
