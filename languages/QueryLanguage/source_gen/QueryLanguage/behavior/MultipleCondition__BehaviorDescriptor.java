package QueryLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class MultipleCondition__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, "QueryLanguage.structure.MultipleCondition");

  public static final SMethod<Void> setMultipleConditionString_id6w4sAgfAEwn = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setMultipleConditionString").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(7495241453935437847L).languageId(0xb522c0cdd699ded3L, 0x26d1395b1ee643adL).build2();
  /*package*/ static final SMethod<String> translateCondition_id6w4sAgfAE$o = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("translateCondition").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(7495241453935438104L).languageId(0xb522c0cdd699ded3L, 0x26d1395b1ee643adL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<String> translateSimpleCondition_id6w4sAgfAEDl = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("translateSimpleCondition").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(7495241453935438421L).languageId(0xb522c0cdd699ded3L, 0x26d1395b1ee643adL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<String> translateMultipleCondition_id6w4sAgfAMLR = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("translateMultipleCondition").modifiers(0, AccessPrivileges.PRIVATE).concept(CONCEPT).baseMethodId(7495241453935471735L).languageId(0xb522c0cdd699ded3L, 0x26d1395b1ee643adL).build2(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(setMultipleConditionString_id6w4sAgfAEwn, translateCondition_id6w4sAgfAE$o, translateSimpleCondition_id6w4sAgfAEDl, translateMultipleCondition_id6w4sAgfAMLR);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static void setMultipleConditionString_id6w4sAgfAEwn(@NotNull SNode __thisNode__) {
    SPropertyOperations.assign(__thisNode__, PROPS.textualCondition$n5ly, MultipleCondition__BehaviorDescriptor.translateMultipleCondition_id6w4sAgfAMLR.invokeSpecial(__thisNode__, __thisNode__));
  }
  /*package*/ static String translateCondition_id6w4sAgfAE$o(@NotNull SNode __thisNode__, SNode condition) {
    {
      final SNode sCondition = condition;
      if (SNodeOperations.isInstanceOf(sCondition, CONCEPTS.SimpleCondition$89)) {
        return MultipleCondition__BehaviorDescriptor.translateSimpleCondition_id6w4sAgfAEDl.invokeSpecial(__thisNode__, sCondition);
      }
    }
    {
      final SNode mCondition = condition;
      if (SNodeOperations.isInstanceOf(mCondition, CONCEPTS.MultipleCondition$9A)) {
        return MultipleCondition__BehaviorDescriptor.translateMultipleCondition_id6w4sAgfAMLR.invokeSpecial(__thisNode__, mCondition);
      }
    }
    return "";
  }
  /*package*/ static String translateSimpleCondition_id6w4sAgfAEDl(@NotNull SNode __thisNode__, SNode sCondition) {
    return SPropertyOperations.getString(sCondition, PROPS.textualCondition$n5ly);
  }
  /*package*/ static String translateMultipleCondition_id6w4sAgfAMLR(@NotNull SNode __thisNode__, SNode mCondition) {
    String conditionSx = MultipleCondition__BehaviorDescriptor.translateCondition_id6w4sAgfAE$o.invokeSpecial(__thisNode__, SLinkOperations.getTarget(mCondition, LINKS.conditionSx$ALET));
    String conditionDx = MultipleCondition__BehaviorDescriptor.translateCondition_id6w4sAgfAE$o.invokeSpecial(__thisNode__, SLinkOperations.getTarget(mCondition, LINKS.conditionDx$A_03));
    if (SPropertyOperations.getEnum(mCondition, PROPS.operator$A6J2) == SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x23d860ebbb7c269aL, "QueryLanguage.structure.ConditionOperator"), 0x23d860ebbb7c269bL, "AND")) {
      return conditionSx + " && " + conditionDx;
    }
    return conditionSx + " || " + conditionDx;
  }

  /*package*/ MultipleCondition__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        setMultipleConditionString_id6w4sAgfAEwn(node);
        return null;
      case 1:
        return (T) ((String) translateCondition_id6w4sAgfAE$o(node, (SNode) parameters[0]));
      case 2:
        return (T) ((String) translateSimpleCondition_id6w4sAgfAEDl(node, (SNode) parameters[0]));
      case 3:
        return (T) ((String) translateMultipleCondition_id6w4sAgfAMLR(node, (SNode) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty textualCondition$n5ly = MetaAdapterFactory.getProperty(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea17L, 0x680472640f9c3430L, "textualCondition");
    /*package*/ static final SProperty operator$A6J2 = MetaAdapterFactory.getProperty(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, 0x5eeb1b6c0699ea20L, "operator");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SimpleCondition$89 = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea18L, "QueryLanguage.structure.SimpleCondition");
    /*package*/ static final SConcept MultipleCondition$9A = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, "QueryLanguage.structure.MultipleCondition");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink conditionSx$ALET = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, 0x5eeb1b6c0699ea59L, "conditionSx");
    /*package*/ static final SContainmentLink conditionDx$A_03 = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x5eeb1b6c0699ea1bL, 0x5eeb1b6c0699ea4dL, "conditionDx");
  }
}
