package QueryLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class Select_Constraints extends BaseConstraintsDescriptor {
  public Select_Constraints() {
    super(CONCEPTS.Select$Te);
  }

  public static class TableAlias_Property extends BasePropertyConstraintsDescriptor {
    public TableAlias_Property(ConstraintsDescriptor container) {
      super(PROPS.tableAlias$yY2f, container, false, true, true);
    }
    @Override
    public void setPropertyValue(SNode node, Object propertyValue) {
      staticSetPropertyValue(node, SPropertyOperations.castString(propertyValue));
    }
    private static void staticSetPropertyValue(SNode node, String propertyValue) {

      if (isNotEmptyString(SPropertyOperations.getString(node, PROPS.tableAlias$yY2f))) {
        SPropertyOperations.assign(SLinkOperations.getTarget(node, LINKS.aliasTable$4dXf), PROPS.name$MnvL, propertyValue);
        SPropertyOperations.assign(node, PROPS.tableAlias$yY2f, propertyValue);
        return;
      }

      SPropertyOperations.assign(node, PROPS.tableAlias$yY2f, propertyValue);

      SNode newTable = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b2eL, "QueryLanguage.structure.CreateTable"));
      SPropertyOperations.assign(newTable, PROPS.name$MnvL, propertyValue);

      for (SNode col : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.cols$kMcM))) {
        {
          final SNode columnRef = col;
          if (SNodeOperations.isInstanceOf(columnRef, CONCEPTS.ColumnRef$XM)) {
            ListSequence.fromList(SLinkOperations.getChildren(newTable, LINKS.columns$ubIo)).addElement(SNodeOperations.copyNode(SLinkOperations.getTarget(columnRef, LINKS.column$Wyeu)));
          }
        }
        {
          final SNode allColumns = col;
          if (SNodeOperations.isInstanceOf(allColumns, CONCEPTS.AllColumns$eP)) {
            for (SNode column : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.tables$IXdn)).getElement(0), LINKS.tableRef$boeY), LINKS.columns$ubIo))) {
              if (!(ListSequence.fromList(SLinkOperations.getChildren(newTable, LINKS.columns$ubIo)).contains(column))) {
                ListSequence.fromList(SLinkOperations.getChildren(newTable, LINKS.columns$ubIo)).addElement(SNodeOperations.copyNode(column));
              }
            }
          }
        }
      }

      SLinkOperations.setTarget(node, LINKS.aliasTable$4dXf, newTable);

    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:7edf4f40-f81a-49df-87e2-b00351b83558(QueryLanguage.constraints)", "817930103570200137"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      // alias is not supported for joined tables
      return ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.tables$IXdn)).count() == 1;
    }
    private static boolean isNotEmptyString(String str) {
      return str != null && str.length() > 0;
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.tableAlias$yY2f, new TableAlias_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Select$Te = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, "QueryLanguage.structure.Select");
    /*package*/ static final SConcept ColumnRef$XM = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee7375157f4L, "QueryLanguage.structure.ColumnRef");
    /*package*/ static final SConcept AllColumns$eP = MetaAdapterFactory.getConcept(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0xe8aecd6b2519713L, "QueryLanguage.structure.AllColumns");
  }

  private static final class PROPS {
    /*package*/ static final SProperty tableAlias$yY2f = MetaAdapterFactory.getProperty(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0x7642dbf63a87dc6eL, "tableAlias");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink aliasTable$4dXf = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0xb59df187aa1e081L, "aliasTable");
    /*package*/ static final SContainmentLink columns$ubIo = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b2eL, 0x75900635108ee054L, "columns");
    /*package*/ static final SReferenceLink column$Wyeu = MetaAdapterFactory.getReferenceLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee7375157f4L, 0x11100ee7375157f5L, "column");
    /*package*/ static final SContainmentLink tables$IXdn = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0x207f13a8b54616bfL, "tables");
    /*package*/ static final SReferenceLink tableRef$boeY = MetaAdapterFactory.getReferenceLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x207f13a8b545f6deL, 0x207f13a8b545f6dfL, "tableRef");
    /*package*/ static final SContainmentLink cols$kMcM = MetaAdapterFactory.getContainmentLink(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L, 0xe8aecd6b255930cL, "cols");
  }
}
