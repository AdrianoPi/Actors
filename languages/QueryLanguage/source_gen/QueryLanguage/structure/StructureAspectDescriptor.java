package QueryLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptColumn = createDescriptorForColumn();
  /*package*/ final ConceptDescriptor myConceptColumnRef = createDescriptorForColumnRef();
  /*package*/ final ConceptDescriptor myConceptCondition = createDescriptorForCondition();
  /*package*/ final ConceptDescriptor myConceptCreateTable = createDescriptorForCreateTable();
  /*package*/ final ConceptDescriptor myConceptScript = createDescriptorForScript();
  /*package*/ final ConceptDescriptor myConceptSelect = createDescriptorForSelect();
  /*package*/ final ConceptDescriptor myConceptStatement = createDescriptorForStatement();
  /*package*/ final ConceptDescriptor myConceptWhere = createDescriptorForWhere();
  /*package*/ final EnumerationDescriptor myEnumerationOperator = new EnumerationDescriptor_Operator();
  /*package*/ final EnumerationDescriptor myEnumerationType = new EnumerationDescriptor_Type();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptColumn, myConceptColumnRef, myConceptCondition, myConceptCreateTable, myConceptScript, myConceptSelect, myConceptStatement, myConceptWhere);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Column:
        return myConceptColumn;
      case LanguageConceptSwitch.ColumnRef:
        return myConceptColumnRef;
      case LanguageConceptSwitch.Condition:
        return myConceptCondition;
      case LanguageConceptSwitch.CreateTable:
        return myConceptCreateTable;
      case LanguageConceptSwitch.Script:
        return myConceptScript;
      case LanguageConceptSwitch.Select:
        return myConceptSelect;
      case LanguageConceptSwitch.Statement:
        return myConceptStatement;
      case LanguageConceptSwitch.Where:
        return myConceptWhere;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationOperator, myEnumerationType);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForColumn() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("QueryLanguage", "Column", 0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b33L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:e2175f5d-85fc-4bdd-8ae1-8b72b7f266cc(QueryLanguage.structure)/1229499084499598131");
    b.version(3);
    b.property("type", 0x11100ee737443b37L).type(MetaIdFactory.dataTypeId(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b39L)).origin("1229499084499598135").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForColumnRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("QueryLanguage", "ColumnRef", 0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee7375157f4L);
    b.class_(false, false, false);
    b.origin("r:e2175f5d-85fc-4bdd-8ae1-8b72b7f266cc(QueryLanguage.structure)/1229499084500457460");
    b.version(3);
    b.associate("column", 0x11100ee7375157f5L).target(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b33L).optional(false).origin("1229499084500457461").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("QueryLanguage", "Condition", 0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737470ff3L);
    b.class_(false, false, false);
    b.origin("r:e2175f5d-85fc-4bdd-8ae1-8b72b7f266cc(QueryLanguage.structure)/1229499084499783667");
    b.version(3);
    b.property("operator", 0x11100ee737471046L).type(MetaIdFactory.dataTypeId(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737470ff9L)).origin("1229499084499783750").done();
    b.property("value", 0x11100ee737471049L).type(PrimitiveTypeId.STRING).origin("1229499084499783753").done();
    b.associate("column", 0x11100ee7375283dfL).target(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b33L).optional(false).origin("1229499084500534239").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCreateTable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("QueryLanguage", "CreateTable", 0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b2eL);
    b.class_(false, false, false);
    // extends: QueryLanguage.structure.Statement
    b.super_(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b30L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:e2175f5d-85fc-4bdd-8ae1-8b72b7f266cc(QueryLanguage.structure)/1229499084499598126");
    b.version(3);
    b.aggregate("columns", 0x11100ee737443b48L).target(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b33L).optional(true).ordered(true).multiple(true).origin("1229499084499598152").done();
    b.alias("CREATE TABLE");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForScript() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("QueryLanguage", "Script", 0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443bcdL);
    b.class_(false, false, true);
    b.origin("r:e2175f5d-85fc-4bdd-8ae1-8b72b7f266cc(QueryLanguage.structure)/1229499084499598285");
    b.version(3);
    b.aggregate("queries", 0x11100ee737443bd0L).target(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b30L).optional(true).ordered(true).multiple(true).origin("1229499084499598288").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSelect() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("QueryLanguage", "Select", 0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e379L);
    b.class_(false, false, false);
    // extends: QueryLanguage.structure.Statement
    b.super_(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b30L);
    b.origin("r:e2175f5d-85fc-4bdd-8ae1-8b72b7f266cc(QueryLanguage.structure)/7033755722359825273");
    b.version(3);
    b.associate("table", 0x11100ee7374516b6L).target(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b2eL).optional(false).origin("1229499084499654326").done();
    b.aggregate("where", 0x11100ee73745172dL).target(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e37bL).optional(true).ordered(true).multiple(false).origin("1229499084499654445").done();
    b.aggregate("columns", 0x11100ee7375157faL).target(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee7375157f4L).optional(true).ordered(true).multiple(true).origin("1229499084500457466").done();
    b.alias("SELECT");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("QueryLanguage", "Statement", 0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b30L);
    b.class_(false, true, false);
    b.origin("r:e2175f5d-85fc-4bdd-8ae1-8b72b7f266cc(QueryLanguage.structure)/1229499084499598128");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForWhere() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("QueryLanguage", "Where", 0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x619ceb902420e37bL);
    b.class_(false, false, false);
    b.origin("r:e2175f5d-85fc-4bdd-8ae1-8b72b7f266cc(QueryLanguage.structure)/7033755722359825275");
    b.version(3);
    b.associate("table", 0x11100ee737494799L).target(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737443b2eL).optional(false).origin("1229499084499928985").done();
    b.aggregate("condition", 0x11100ee7374a23b4L).target(0x26d1395b1ee643adL, 0xb522c0cdd699ded3L, 0x11100ee737470ff3L).optional(false).ordered(true).multiple(false).origin("1229499084499985332").done();
    b.alias("WHERE");
    return b.create();
  }
}
